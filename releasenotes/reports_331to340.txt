====================================================================
REMOVED REPORTS:
SequencedBOM
====================================================================
CHANGED REPORTS:
CreditMemo
ExpenseCategoriesMasterList
GLTransactions
IncidentsByCRMAccount
Invoice
ListTransferOrders
POHistory
PackingList-Shipment
PackingList
PendingBOMChanges
Quote
RunningAvailability
SingleLevelBOM
SummarizedSalesByCustomerType
WOScheduleByParameterList

 
 ====================================================================
 REPORT: CreditMemo
 QUERY: GroupHead
 SELECT remitto.*,
        cmhead_number,
        formatDate(cmhead_docdate) AS docdate,
        cust_number,
        cust_name,
        formatAddr(cmhead_billtoaddress1, cmhead_billtoaddress2, cmhead_billtoaddress3,
                   COALESCE(cmhead_billtocity,'') || '  ' || COALESCE(cmhead_billtostate,'') || '  ' || COALESCE(cmhead_billtozip,''),
                    cmhead_billtocountry)
        AS f_custaddr,
        cust_phone,
        cmhead_shipto_name,
        formatAddr(cmhead_shipto_address1, cmhead_shipto_address2, cmhead_shipto_address3,
                   COALESCE(cmhead_shipto_city,'') ||'  '|| COALESCE(cmhead_shipto_state,'') || '  '|| COALESCE(cmhead_shipto_zipcode,''),
                   cmhead_shipto_country)
                   AS f_shiptoaddr,
        CASE 
          WHEN (cmhead_invcnumber='-1') THEN ''
          --note: must now set explicit type for Postgres 8.3+
          --add ' '
          ELSE text(cmhead_invcnumber)
        END AS invcnumber,
        cmhead_custponumber,
        cmhead_comments,
        cmhead_misc_descrip,
        curr_symbol,
        curr_name
   FROM remitto, cmhead, cust, curr_symbol
  WHERE ((cmhead_cust_id=cust_id)
        AND (cmhead_curr_id = curr_id)
        AND (cmhead_id=%1))
 ORDER BY cmhead_number;
 --------------------------------------------------------------------
   
 QUERY: Detail
 SELECT cmitem_linenumber,
        formatQty(cmitem_qtycredit) AS qtycredit,
        formatQty(cmitem_qtyreturned) AS qtyreturned,
        uom_name,
        item_number,
        item_descrip1,
        item_descrip2,
        formatSalesPrice(cmitem_unitprice) AS unitprice,
        formatMoney((cmitem_qtycredit * cmitem_qty_invuomratio) * (cmitem_unitprice / cmitem_price_invuomratio)) AS extprice,
        cmitem_comments
   FROM cmitem, itemsite, item, uom
  WHERE ((cmitem_itemsite_id=itemsite_id)
    AND (itemsite_item_id=item_id)
    AND (item_inv_uom_id=uom_id)
    AND (cmitem_cmhead_id=%1))
 ORDER BY cmitem_linenumber;
 --------------------------------------------------------------------
   
 QUERY: GroupFoot
 SELECT formatExtPrice(SUM((cmitem_qtycredit * cmitem_qty_invuomratio) * cmitem_unitprice / cmitem_price_invuomratio)) AS extprice
   FROM cmhead, cmitem, itemsite, item
  WHERE ((cmitem_cmhead_id=cmhead_id)
    AND (cmitem_itemsite_id=itemsite_id)
    AND (itemsite_item_id=item_id)
    AND (cmhead_id=%1));
 --------------------------------------------------------------------
   
 QUERY: GroupExtended
-SELECT formatExtPrice(COALESCE(cmhead_freight,0.0) + COALESCE(cmhead_tax,0.0) + COALESCE(cmhead_misc,0.0) +
-         ( SELECT COALESCE(SUM((cmitem_qtycredit * cmitem_qty_invuomratio) * cmitem_unitprice / cmitem_price_invuomratio), 0.0)
-             FROM cmitem, itemsite, item
-            WHERE ((cmitem_cmhead_id=%1)
-              AND (cmitem_itemsite_id=itemsite_id)
-              AND (itemsite_item_id=item_id)
-             )
-           )
+SELECT formatExtPrice( COALESCE(cmhead_freight,0.0) +
+                       ( SELECT COALESCE(SUM(tax * -1.0), 0)
+                         FROM ( SELECT ROUND(SUM(taxdetail_tax), 2) AS tax
+                                FROM tax JOIN calculateTaxDetailSummary('CM', cmhead_id, 'T')
+                                           ON (taxdetail_tax_id=tax_id)
+                                GROUP BY tax_id ) AS data ) +
+                       COALESCE(cmhead_misc,0.0) +
+                       ( SELECT COALESCE(SUM((cmitem_qtycredit * cmitem_qty_invuomratio) *
+                                              cmitem_unitprice / cmitem_price_invuomratio), 0.0)
+                         FROM cmitem
+                         WHERE (cmitem_cmhead_id=%1) ) 
          ) AS totaldue,
        formatExtPrice(COALESCE(cmhead_freight,0.0)) AS freight,
-       formatExtPrice(COALESCE(cmhead_tax,0.0)) AS tax,
+       ( SELECT formatExtPrice(COALESCE(SUM(tax * -1.0), 0))
+         FROM ( SELECT ROUND(SUM(taxdetail_tax), 2) AS tax
+                FROM tax JOIN calculateTaxDetailSummary('CM', cmhead_id, 'T')
+                           ON (taxdetail_tax_id=tax_id)
+                GROUP BY tax_id ) AS data ) AS tax,
        formatExtPrice(COALESCE(cmhead_misc,0.0)) AS misc
   FROM cmhead
  WHERE (cmhead_id=%1);
+
 --------------------------------------------------------------------
   
 QUERY: logo
 SELECT image_data 
 FROM image 
 WHERE ((image_name='logo'));
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: ExpenseCategoriesMasterList
 QUERY: detail
 SELECT 
   expcat_code,
   expcat_descrip,
-          (SELECT
-                 accnt.accnt_company || '-' || 
-                 accnt.accnt_profit|| '-' || 
-                 accnt.accnt_number|| '-' || 
-                 accnt.accnt_sub || '   ' || 
-                 accnt_descrip
-           FROM 
-                 public.expcat, 
-                 public.accnt
-           WHERE 
-                 expcat.expcat_exp_accnt_id = accnt.accnt_id AND
-                 A.expcat_id = expcat_id
-           ) AS exp_accnt,
-
-  (SELECT
-                 accnt.accnt_company || '-' || 
-                 accnt.accnt_profit|| '-' || 
-                 accnt.accnt_number|| '-' || 
-                 accnt.accnt_sub || '   ' || 
-                 accnt_descrip
-           FROM 
-                 public.expcat, 
-                 public.accnt
-           WHERE 
-                 expcat.expcat_purchprice_accnt_id = accnt.accnt_id AND
-                 A.expcat_id = expcat_id
-           ) AS ppv_accnt,
-
-  (SELECT
-                 accnt.accnt_company || '-' || 
-                 accnt.accnt_profit|| '-' || 
-                 accnt.accnt_number|| '-' || 
-                 accnt.accnt_sub || '   ' || 
-                 accnt_descrip
-           FROM 
-                 public.expcat, 
-                 public.accnt
-           WHERE 
-                 expcat.expcat_liability_accnt_id = accnt.accnt_id AND
-                 A.expcat_id = expcat_id
-           ) AS poliab_accnt,
-
-  (SELECT
-                 accnt.accnt_company || '-' || 
-                 accnt.accnt_profit|| '-' || 
-                 accnt.accnt_number|| '-' || 
-                 accnt.accnt_sub || '   ' || 
-                 accnt_descrip
-           FROM 
-                 public.expcat, 
-                 public.accnt
-           WHERE 
-                 expcat.expcat_freight_accnt_id = accnt.accnt_id AND
-                 A.expcat_id = expcat_id
-           ) AS polinefrgt_accnt
-
+  formatGLAccountLong(expcat_exp_accnt_id) AS exp_accnt,
+  formatGLAccountLong(expcat_purchprice_accnt_id) AS ppv_accnt,
+  formatGLAccountLong(expcat_liability_accnt_id) AS poliab_accnt,
+  formatGLAccountLong(expcat_freight_accnt_id) AS polinefrgt_accnt
 FROM 
   expcat AS A
 ORDER BY expcat_code;
 
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: GLTransactions
 QUERY: head
 SELECT formatDate(<? value("startDate") ?>, 'Earliest') AS startdate,
        formatDate(<? value("endDate") ?>, 'Latest') AS enddate,
        <? if exists("source") ?>
          text(<? value("source") ?>)
        <? else ?>
          text('All Sources')
        <? endif  ?>
        AS source,
        <? if exists("accnt_id") ?>
          ( SELECT (accnt_number || '-' || accnt_descrip)
              FROM accnt
             WHERE (accnt_id=<? value("accnt_id") ?>) )
        <? else ?>
          text('All Accounts')
        <? endif ?>
        AS accnt,
        <? if exists("showUsernames") ?>
          text('Username')
        <? else ?>
          text('')
        <? endif ?>
        AS f_username
 --------------------------------------------------------------------
   
 QUERY: detail
+<? if exists("beginningBalance") ?>
+SELECT -1 AS gltrans_id,
+       <? value("startDate") ?> AS gltrans_created, formatDate(<? value("startDate") ?>) AS transdate,
+       '' AS gltrans_source, '' AS gltrans_doctype, '' AS gltrans_docnumber, '' AS invhist_docnumber,
+       'Beginning Balance' AS transnotes,
+       (formatGLAccount(accnt_id) || ' - ' || accnt_descrip) AS account,
+       CASE WHEN (<? value("beginningBalance") ?> < 0) THEN
+                     formatMoney(ABS(<? value("beginningBalance") ?>))
+            ELSE ''
+       END AS f_debit,
+       CASE WHEN (<? value("beginningBalance") ?> < 0) THEN
+                     ABS(<? value("beginningBalance") ?>)
+            ELSE 0
+       END AS debit_amt,
 
-  SELECT gltrans_id,
+       CASE WHEN (<? value("beginningBalance") ?> > 0) THEN
+                     formatMoney(ABS(<? value("beginningBalance") ?>))
+            ELSE ''
+       END AS f_credit,
+       CASE WHEN (<? value("beginningBalance") ?> > 0) THEN
+                     ABS(<? value("beginningBalance") ?>)
+            ELSE 0
+       END AS credit_amt,
+       <? value("beginningBalance") ?> * -1 AS balance_amt,
+       <? value("beginningBalance") ?> AS gltrans_amount,
+       <? value("beginningBalance") ?> AS running,
+       NULL AS f_posted,
+       NULL AS f_username,
+       -1 AS gltrans_sequence
+ FROM accnt
+ WHERE (accnt_id=<? value("accnt_id") ?>)
+UNION
+<? endif ?>
+
+SELECT gltrans_id,
        gltrans_created, formatDate(gltrans_date) AS transdate,
        gltrans_source, gltrans_doctype, gltrans_docnumber, invhist_docnumber,
        firstLine(gltrans_notes) AS transnotes,
        (formatGLAccount(accnt_id) || ' - ' || accnt_descrip) AS account,
 -- Debits:
        CASE WHEN (gltrans_amount < 0) THEN formatMoney(ABS(gltrans_amount))
             ELSE ''
        END AS f_debit,       
        CASE WHEN (gltrans_amount < 0) THEN ABS(gltrans_amount)
             ELSE 0
        END AS debit_amt, 
 --Credits:
        CASE WHEN (gltrans_amount > 0) THEN formatMoney(gltrans_amount)
             ELSE ''
        END AS f_credit,
        CASE WHEN (gltrans_amount > 0) THEN gltrans_amount
             ELSE 0
        END AS credit_amt,
 --Balance:
        gltrans_amount * -1 as balance_amt,
 --
        gltrans_amount,
        CASE WHEN accnt_type IN ('A','E') THEN 
          gltrans_amount * -1
        ELSE gltrans_amount END AS running,
        formatBoolYN(gltrans_posted) AS f_posted,
        gltrans_username AS f_username,
        gltrans_sequence
   FROM gltrans JOIN accnt ON (gltrans_accnt_id=accnt_id)
        LEFT OUTER JOIN invhist ON (gltrans_misc_id=invhist_id AND gltrans_docnumber='Misc.')
  WHERE ((gltrans_date BETWEEN <? value("startDate") ?> AND <? value("endDate") ?>)
 <? if exists("accnt_id") ?>
    AND (gltrans_accnt_id=<? value("accnt_id") ?>)
 <? endif ?>
 <? if exists("source") ?>
    AND (gltrans_source=<? value("source") ?>)
 <? endif ?>
        )
-  <? if exists("beginningBalance") ?>
-  UNION SELECT -1,
-        <? value("startDate") ?>, formatDate(<? value("startDate") ?>),
-        '', '', '', '',
-        'Beginning Balance',
-        (formatGLAccount(accnt_id) || ' - ' || accnt_descrip),
-        CASE WHEN (<? value("beginningBalance") ?> < 0) THEN
-                      formatMoney(ABS(<? value("beginningBalance") ?>))
-             ELSE ''
-        END,
-        CASE WHEN (<? value("beginningBalance") ?> < 0) THEN
-                      ABS(<? value("beginningBalance") ?>)
-             ELSE 0
-        END,
-
-        CASE WHEN (<? value("beginningBalance") ?> > 0) THEN
-                      formatMoney(ABS(<? value("beginningBalance") ?>))
-             ELSE ''
-        END,
-        CASE WHEN (<? value("beginningBalance") ?> > 0) THEN
-                      ABS(<? value("beginningBalance") ?>)
-             ELSE 0
-        END,
-        <? value("beginningBalance") ?> * -1,
-        <? value("beginningBalance") ?>,
-        <? value("beginningBalance") ?>,
-        NULL,
-        NULL,
-        -1
-  FROM accnt
-  WHERE (accnt_id=<? value("accnt_id") ?>)
 ORDER BY gltrans_created <? if not exists("beginningBalance") ?> DESC <? endif ?>,
-        gltrans_sequence, gltrans_amount;
+        gltrans_sequence, gltrans_amount
+
+;
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: IncidentsByCRMAccount
 QUERY: detail
 SELECT crmacct_id, COALESCE(TEXT(incdt_id), '') AS incdt_id, todoitem_id,
        crmacct_number, crmacct_name,
        incdt_number, DATE(incdt_timestamp) AS incdt_timestamp,
        CASE WHEN(incdt_status='N') THEN <? value("new") ?>
             WHEN(incdt_status='F') THEN <? value("feedback") ?>
             WHEN(incdt_status='C') THEN <? value("confirmed") ?>
             WHEN(incdt_status='A') THEN <? value("assigned") ?>
             WHEN(incdt_status='R') THEN <? value("resolved") ?>
             WHEN(incdt_status='L') THEN <? value("closed") ?>
             ELSE incdt_status
        END AS incdt_status,
        incdt_assigned_username, incdt_summary,
        todoitem_due_date, todoitem_name,
        todoitem_username AS todoitem_usrname,
        todoitem_assigned_date, todoitem_status,
        incdtseverity_name,
        incdtpriority_name
 FROM crmacct
 <? if exists("showAcctsWOIncdts") ?>
   LEFT OUTER
 <? endif ?>
       JOIN incdt ON (incdt_crmacct_id=crmacct_id
                      AND (incdt_timestamp BETWEEN <? value("startDate") ?>
                                               AND <? value("endDate") ?>)
                      <? if not exists("showClosed") ?>
                        AND (incdt_status != 'L')
                      <? endif ?>)
-      LEFT OUTER JOIN todoitem ON (todoitem_incdt_id=incdt_id)
+      LEFT OUTER JOIN todoitem ON (todoitem_incdt_id=incdt_id AND
+                                  (todoitem_status IS NULL OR todoitem_status != 'C'))
       LEFT OUTER JOIN incdtseverity ON (incdt_incdtseverity_id = incdtseverity_id)
       LEFT OUTER JOIN incdtpriority ON (incdt_incdtpriority_id = incdtpriority_id)
-WHERE ((todoitem_status IS NULL OR todoitem_status != 'C')
+WHERE (TRUE
 <? if exists("crmacct_id") ?>
   AND (crmacct_id=<? value("crmacct_id") ?>)
 <? endif ?>
 <? if exists("showAcctsWOIncdts") ?>
    AND (incdt_id IS NULL OR (true
 <? endif ?>
 
 <? if exists("showAcctsWOIncdts") ?>
    ))
 <? endif ?>
  ) 
 ORDER BY crmacct_name, incdt_timestamp, todoitem_due_date;
 --------------------------------------------------------------------
   
 QUERY: queryParams
 SELECT
   <? if exists("showClosed") ?> 'Yes' <? else ?> 'No' <? endif ?> AS showClosed,
   <? if exists("showAcctsWOIncdts") ?> 'Yes' <? else ?> 'No' <? endif ?> AS showAcctsWOIncdts,
   <? if exists("crmacct_id") ?>
     crmacct_name
     FROM crmacct
     WHERE (crmacct_id=<? value("crmacct_id") ?>)
   <? elseif exists("crmacct_pattern") ?>
     <? value("crmacct_pattern") ?>
   <? else ?>
     'ALL' AS crmacct_name
   <? endif ?>
 ;
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: Invoice
 QUERY: GroupHead
 SELECT 
 
 --Due Date
 CASE WHEN terms_type = 'D' THEN
 
 	FORMATDATE(DATE(invchead_invcdate + terms_duedays))
 	
 	WHEN terms_type = 'P' AND EXTRACT(DAY FROM(invchead_invcdate))<= terms_cutoffday THEN
 
 	FORMATDATE(DATE(
 	EXTRACT(YEAR FROM(invchead_invcdate)) || '-' || 
 	EXTRACT(MONTH FROM(invchead_invcdate)) || '-' || 
 	terms_duedays
 	))
 
 	WHEN terms_type = 'P' AND EXTRACT(DAY FROM(invchead_invcdate)) > terms_cutoffday THEN
 
 	FORMATDATE(DATE(
 	EXTRACT(YEAR FROM(invchead_invcdate)) || '-' || 
 	(EXTRACT(MONTH FROM(invchead_invcdate)) +1) || '-' || 
 	terms_duedays
 	))
 	
 	END AS due_date,
 --Discount Date-------------------------------------
 
 CASE WHEN terms_type = 'D' THEN
 	FORMATDATE(DATE(invchead_invcdate + terms_discdays))
 
         WHEN terms_type = 'P' AND EXTRACT(DAY FROM(invchead_invcdate))<= terms_cutoffday THEN
 	
 	FORMATDATE(DATE(
 	EXTRACT(YEAR FROM(invchead_invcdate)) || '-' || 
 	EXTRACT(MONTH FROM(invchead_invcdate)) || '-' || 
 	terms_discdays
 	))
 
 	WHEN terms_type = 'P' AND EXTRACT(DAY FROM(invchead_invcdate)) > terms_cutoffday THEN
 
 	FORMATDATE(DATE(
 	EXTRACT(YEAR FROM(invchead_invcdate)) || '-' || 
 	(EXTRACT(MONTH FROM(invchead_invcdate)) +1) || '-' || 
 	terms_discdays
 	))
 	END AS dis_date,
 
 --Discount Date END --
 
 
        --remitto.*,
 remitto_name,
 formatAddr(remitto_address1, remitto_address2, remitto_address3, remitto_citystatezip, remitto_country) AS remitto_adr,
        invchead_invcnumber AS invoicenumber,
        formatDate(invchead_invcdate) AS f_invoicedate,
        cust_number,
        invchead_billto_name,
        formatAddr(invchead_billto_address1, invchead_billto_address2, invchead_billto_address3, ( invchead_billto_city || '  ' || invchead_billto_state || '  ' || invchead_billto_zipcode ), invchead_billto_country) AS f_billtoaddress,
        invchead_billto_phone,
        invchead_shipto_name,
        formatAddr(invchead_shipto_address1, invchead_shipto_address2, invchead_shipto_address3, ( invchead_shipto_city || '  ' || invchead_shipto_state || ' ' || invchead_shipto_zipcode ), invchead_shipto_country) AS f_shiptoaddress,
        invchead_ordernumber AS ordernumber,
        invchead_ponumber,
        formatDate(invchead_orderdate) AS f_orderdate,
        formatDate(invchead_shipdate) AS f_shipdate,
        invchead_fob, terms_descrip, invchead_shipvia
 FROM remitto, cust, invchead
      LEFT OUTER JOIN terms ON (invchead_terms_id=terms_id)
 WHERE ( (invchead_cust_id=cust_id)
- AND (invchead_id=<? value("invchead_id") ?>) )
+AND (invchead_id=<? value("invchead_id") ?>) )
 ORDER BY ordernumber;
 --------------------------------------------------------------------
   
 QUERY: Detail
 SELECT invcitem_linenumber,
        formatQty(invcitem_billed) AS f_billed,
        (select uom_name from uom where uom_id = invcitem_qty_uom_id) AS invuom,
        CASE WHEN (item_number IS NULL) THEN invcitem_number
             WHEN (invcitem_custpn != '') THEN invcitem_custpn
             else item_number
        END AS number,
        CASE WHEN (item_number IS NULL) THEN invcitem_descrip
             WHEN (invcitem_custpn != '' AND itemalias_usedescrip=TRUE) THEN itemalias_descrip1
             ELSE item_descrip1
        END AS descrip1,
        CASE WHEN (invcitem_custpn != '' AND itemalias_usedescrip=TRUE) THEN itemalias_descrip2
             ELSE item_descrip2
        END AS descrip2,
        formatPrice(invcitem_qty_invuomratio * invcitem_price / COALESCE(invcitem_price_invuomratio,1)) AS f_unitprice,
        formatMoney(round((invcitem_billed * invcitem_qty_invuomratio) * (invcitem_price / COALESCE(invcitem_price_invuomratio,1)),2)) AS f_extprice,
        invcitem_notes,
        getInvcitemLotSerial(invcitem_id) AS lotserial,
 --Sub-select updated for 3.1 to support kitting
        characteristicsToString('SI',(SELECT coitem_id FROM coitem, cohead, invchead, itemsite 
        WHERE (cohead_number=invchead_ordernumber and invchead_id=<? value("invchead_id") ?>
        and coitem_cohead_id=cohead_id 
        and invcitem_item_id = item_id
        and coitem_itemsite_id = itemsite_id
        and itemsite_item_id = item_id
        and coitem_linenumber=invcitem_linenumber)
        ), '=', ', ') 
        AS coitem_characteristics
 FROM invcitem LEFT OUTER JOIN (item JOIN uom ON (item_inv_uom_id=uom_id)) ON (invcitem_item_id=item_id) LEFT OUTER JOIN itemalias ON (itemalias_item_id=item_id AND itemalias_number=invcitem_custpn)
 WHERE (invcitem_invchead_id=<? value("invchead_id") ?>)
 ORDER BY invcitem_linenumber;
 --------------------------------------------------------------------
   
 QUERY: foot
 SELECT formatMoney(SUM(round((invcitem_billed * invcitem_qty_invuomratio) * (invcitem_price / COALESCE(invcitem_price_invuomratio,1)),2))) AS f_extprice
 FROM invcitem LEFT OUTER JOIN item on (invcitem_item_id=item_id)
 WHERE (invcitem_invchead_id=<? value("invchead_id") ?>);
 --------------------------------------------------------------------
   
 QUERY: GroupExtended
 SELECT *,
         formatMoney(invchead_misc_amount) AS f_misc,
-        formatMoney(head_tax + item_tax)  AS f_tax,
+       formatMoney(tax)                  AS f_tax,
         formatMoney(invchead_freight)     AS f_freight,
         formatMoney(invchead_payment)     AS f_payment,
-        formatMoney(noNeg(invchead_freight + invchead_misc_amount + head_tax + item_tax +
+       formatMoney(noNeg(invchead_freight + invchead_misc_amount + tax +
                           itemtotal - total_allocated)) AS f_totaldue,
-        formatMoney(noNeg(invchead_freight + invchead_misc_amount + head_tax + item_tax +
+       formatMoney(noNeg(invchead_freight + invchead_misc_amount + tax +
                           itemtotal - total_allocated) - (invchead_payment+applied)) AS f_netdue,
         formatMoney(total_allocated) AS f_allocated
   FROM (SELECT invchead_misc_amount, invchead_freight,
                invchead_payment, invchead_notes, invchead_misc_descrip,
-               (SELECT COALESCE(SUM(taxhist_tax), 0) -- COALESCE(SUM()) because taxhist_tax is NOT NULL
-                FROM invcheadtax                     -- and we want 0 if there is no taxhist
-                WHERE (taxhist_parent_id=invchead_id)) AS head_tax,
-               (SELECT COALESCE(SUM(taxhist_tax), 0)
-                FROM invcitem JOIN invcitemtax ON (taxhist_parent_id=invcitem_id)
-                WHERE (invcitem_invchead_id=invchead_id)) AS item_tax,
+              (SELECT SUM(tax) 
+                FROM (
+                SELECT ROUND(SUM(taxdetail_tax),2) AS tax 
+                FROM tax 
+                 JOIN calculateTaxDetailSummary('I', <? value("invchead_id") ?>, 'T') ON (taxdetail_tax_id=tax_id)
+	   GROUP BY tax_id) AS data) AS tax,
                SUM(COALESCE(ROUND(invcitem_billed *
                                   invcitem_qty_invuomratio *
                                   invcitem_price /
                                   COALESCE(invcitem_price_invuomratio,1), 2), 0))
                AS itemtotal,
                SUM(COALESCE(arapply_applied, 0)) AS applied,
                COALESCE(
                CASE WHEN invchead_posted THEN
                   (SELECT SUM(COALESCE(currToCurr(arapply_curr_id, t.aropen_curr_id,
                                                   arapply_applied, t.aropen_docdate), 0))
                    FROM arapply, aropen s, aropen t
                    WHERE ( (s.aropen_id=arapply_source_aropen_id)
                      AND   (arapply_target_aropen_id=t.aropen_id)
                      AND   (arapply_target_doctype='I')
                      AND   (arapply_target_docnumber=invchead_invcnumber)
                      AND   (arapply_source_aropen_id=s.aropen_id)))
                ELSE
                   (SELECT SUM(COALESCE(CASE WHEN((aropen_amount - aropen_paid) >=
                                                  currToCurr(aropenco_curr_id, aropen_curr_id,
                                                             aropenco_amount, aropen_docdate))
                                             THEN currToCurr(aropenco_curr_id, invchead_curr_id,
                                                             aropenco_amount, aropen_docdate)
                                             ELSE currToCurr(aropen_curr_id, invchead_curr_id,
                                                             aropen_amount - aropen_paid,
                                                             aropen_docdate)
                                        END, 0))
                     FROM aropenco, aropen, cohead
                    WHERE ( (aropenco_aropen_id=aropen_id)
                      AND   (aropenco_cohead_id=cohead_id)
                      AND   ((aropen_amount - aropen_paid) > 0)
                      AND   (cohead_number=invchead_ordernumber)))
                END, 0) AS total_allocated
         FROM invchead
              LEFT OUTER JOIN invcitem ON (invcitem_invchead_id=invchead_id)
              LEFT OUTER JOIN arapply ON (arapply_target_docnumber=invchead_invcnumber AND arapply_source_doctype='K')
         WHERE (invchead_id=<? value("invchead_id") ?>)
-        GROUP BY invchead_freight, invchead_misc_amount, head_tax, item_tax,
+       GROUP BY invchead_freight, invchead_misc_amount, tax,
                  invchead_payment, invchead_notes, invchead_misc_descrip,
                  total_allocated
   ) AS dummy_outer
   ;
 --------------------------------------------------------------------
   
 QUERY: allocatedCMs
 SELECT cohead_id,
        aropen_docnumber,
        formatMoney(aropen_amount) AS f_total,
        formatMoney(aropen_paid) AS f_paid,
        formatMoney(aropen_amount - aropen_paid) AS f_balance,
        CASE WHEN((aropen_amount - aropen_paid) >= currToCurr(aropenco_curr_id,
 							     aropen_curr_id,
 							     aropenco_amount,
 							     aropen_docdate))
 	    THEN currToCurr(aropenco_curr_id, aropen_curr_id,
 			    aropenco_amount, aropen_docdate)
             ELSE (aropen_amount - aropen_paid)
        END AS allocated,
        CASE WHEN((aropen_amount - aropen_paid) >= currToCurr(aropenco_curr_id,
 							     aropen_curr_id,
 							     aropenco_amount,
 							     aropen_docdate))
 	    THEN formatMoney(currToCurr(aropenco_curr_id, aropen_curr_id,
 					aropenco_amount, aropen_docdate))
             ELSE formatMoney(aropen_amount - aropen_paid)
        END AS f_allocated,
        CASE WHEN((aropen_amount - aropen_paid) >= currToCurr(aropenco_curr_id,
 							     aropen_curr_id,
 							     aropenco_amount,
 							     aropen_docdate))
 	    THEN currToCurr(aropenco_curr_id, invchead_curr_id,
 			    aropenco_amount, aropen_docdate)
             ELSE currToCurr(aropen_curr_id, invchead_curr_id,
                             aropen_amount - aropen_paid, aropen_docdate)
        END AS allocated_invccurr,
        CASE WHEN((aropen_amount - aropen_paid) >= currToCurr(aropenco_curr_id,
 							     aropen_curr_id,
 							     aropenco_amount,
 							     aropen_docdate))
 	    THEN formatMoney(currToCurr(aropenco_curr_id, invchead_curr_id,
 					aropenco_amount, aropen_docdate))
             ELSE formatMoney(currToCurr(aropen_curr_id, invchead_curr_id,
                                         aropen_amount - aropen_paid,
                                         aropen_docdate))
        END AS f_allocated_invccurr,
        curr_symbol AS aropen_currsymbol
   FROM aropenco, aropen, cohead, invchead, curr_symbol
- WHERE ( (aropenco_aropen_id=aropen_id)
+WHERE ( (aropenco_aropen_id=aropen_id)
    AND   (aropenco_cohead_id=cohead_id)
    AND   ((aropen_amount - aropen_paid) > 0)
    AND   (aropen_curr_id=curr_id)
    AND   (cohead_number=invchead_ordernumber)
    AND   (NOT invchead_posted)
    AND   (invchead_id=<? value("invchead_id") ?>) )
 UNION
 SELECT cohead_id,
        arapply_source_docnumber AS aropen_docnumber,
        formatMoney(s.aropen_amount) AS f_total,
        formatMoney(s.aropen_paid -
                    currToCurr(arapply_curr_id, s.aropen_curr_id,
                               arapply_applied, arapply_postdate)) AS f_paid,
        formatMoney(s.aropen_amount - s.aropen_paid +
                    currToCurr(arapply_curr_id, s.aropen_curr_id,
                               arapply_applied, arapply_postdate)) AS f_balance,
        currToCurr(arapply_curr_id, s.aropen_curr_id,
                   arapply_applied, arapply_postdate) AS allocated,
        formatMoney(currToCurr(arapply_curr_id, s.aropen_curr_id,
                               arapply_applied,
                               arapply_postdate)) AS f_allocated,
        currToCurr(arapply_curr_id, invchead_curr_id,
                   arapply_applied, t.aropen_docdate) AS allocated_invccurr,
        formatMoney(currToCurr(arapply_curr_id, invchead_curr_id,
                               arapply_applied,
                               t.aropen_docdate)) AS f_allocated_invccurr,
        curr_symbol AS aropen_currsymbol
   FROM arapply, aropen s, aropen t, cohead, invchead, curr_symbol
- WHERE ( (s.aropen_id=arapply_source_aropen_id)
+WHERE ( (s.aropen_id=arapply_source_aropen_id)
    AND   (arapply_target_aropen_id=t.aropen_id)
    AND   (arapply_target_doctype='I')
    AND   (arapply_target_docnumber=invchead_invcnumber)
    AND   (arapply_source_aropen_id=s.aropen_id)
    AND   (arapply_curr_id=curr_id)
    AND   (cohead_number=invchead_ordernumber)
    AND   (invchead_posted)
    AND   (invchead_id=<? value("invchead_id") ?>) )
- ORDER BY aropen_docnumber;
+ORDER BY aropen_docnumber;
 --------------------------------------------------------------------
   
 QUERY: currency
 SELECT
- curr_symbol
+curr_symbol
 FROM
     invchead,
     curr_symbol
 WHERE (invchead_id = <? value("invchead_id") ?>) AND
       invchead_curr_id = curr_id;
 --------------------------------------------------------------------
   
 QUERY: logo
 SELECT image_data 
 FROM image 
 WHERE ((image_name='logo'));
 --------------------------------------------------------------------
   
 QUERY: tracknum
 select formatdate(cosmisc_shipdate) AS f_shipdate, cosmisc_tracknum, cosmisc_shipvia from cohead, cosmisc, invchead 
 where 
 cohead_id = cosmisc_cohead_id
 and cohead_number = invchead_ordernumber
 and invchead_id = <? value("invchead_id") ?>
 order by cosmisc_shipdate;
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: ListTransferOrders
 QUERY: head
 SELECT <? if exists("src_warehous_id") ?>
          ( SELECT warehous_code
              FROM whsinfo
             WHERE (warehous_id=<? value("src_warehous_id") ?>) )
        <? else ?>
          text('All Sites')
        <? endif ?> AS src_warehous_code,
        <? if exists("dest_warehous_id") ?>
          ( SELECT warehous_code
              FROM whsinfo
             WHERE (warehous_id=<? value("dest_warehous_id") ?>) )
        <? else ?>
           text('All Sites')
        <? endif ?> AS dest_warehous_code,
        CASE WHEN (<? value ("tohead_status") ?>='C') THEN 'Closed'
             WHEN (<? value ("tohead_status") ?>='O') THEN 'Open'
             ELSE text('All Statuses')
             END AS status;
 
 --------------------------------------------------------------------
   
 QUERY: detail
 SELECT tohead_number,
        tohead_srcname,
        tohead_trnsname,
        tohead_destname,
        formatDate(tohead_orderdate) AS f_orderdate,
        formatDate(MIN(toitem_schedshipdate)) AS f_scheddate,
        formatDate(DATE(MAX(shipitem_shipdate))) AS f_shipdate,
        CASE WHEN (tohead_status='C') THEN 'Closed'
             WHEN (tohead_status='O') THEN 'Open'
             ELSE tohead_status
             END AS status
   FROM tohead, toitem LEFT OUTER JOIN
        (shipitem JOIN
         shiphead ON (shipitem_shiphead_id=shiphead_id
                     AND shiphead_order_type='TO')
        ) ON (shipitem_orderitem_id=toitem_id)
  WHERE ((toitem_tohead_id=tohead_id)
    AND  (toitem_status<>'X')
+<? if exists("tohead_status") ?>
+   AND (tohead_status=<? value("tohead_status") ?>)
+<? elseif exists("excludeClosed") ?>
+   AND (tohead_status <> 'C')
+<? endif ?>
 <? if exists("src_warehous_id") ?>
    AND  (tohead_src_warehous_id=<? value("src_warehous_id") ?>)
 <? endif ?>
 <? if exists("dest_warehous_id") ?>
    AND  (tohead_dest_warehous_id=<? value("dest_warehous_id") ?>)
 <? endif ?>
-<? if exists("tohead_status") ?>
-   AND (tohead_status=<? value("tohead_status") ?>)
-<? endif ?>
 )
 GROUP BY tohead_number, tohead_srcname, tohead_trnsname, tohead_destname,
          tohead_orderdate, tohead_status
 ORDER BY tohead_number;
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: POHistory
 QUERY: head
 SELECT pohead_number,
        vend_name
   FROM pohead, vend
  WHERE ((pohead_id=<? value("pohead_id") ?>)
   AND  (pohead_vend_id=vend_id));
 --------------------------------------------------------------------
   
 QUERY: detail
-SELECT poitem_linenumber as f_number,
-       item_number as f_item, uom_name as f_uom1,
-       formatDate(poitem_duedate) as f_duedate,
-       poitem_vend_item_number as f_vend_item,
-       poitem_vend_uom as f_uom2,
-       formatQty(poitem_qty_ordered) as f_ordered,
-       formatqty(poitem_qty_received) as f_received
-  FROM poitem, itemsite, item, uom
- WHERE ((poitem_itemsite_id=itemsite_id)
-   AND (itemsite_item_id=item_id)
-   AND (item_inv_uom_id=uom_id)
-   AND (poitem_pohead_id=<? value("pohead_id") ?>)) 
-ORDER BY poitem_linenumber;
+SELECT 
+poitem_linenumber as f_number, 
+item_number as f_item, 
+uom_name as f_uom1,
+formatDate(poitem_duedate) as f_duedate,
+poitem_vend_item_number as f_vend_item,
+poitem_vend_uom as f_uom2,
+formatQty(poitem_qty_ordered) as f_ordered,
+formatqty(poitem_qty_received) as f_received
+FROM poitem, itemsite, item, uom
+WHERE ((poitem_itemsite_id=itemsite_id)
+AND (itemsite_item_id=item_id)
+AND (item_inv_uom_id=uom_id)
+AND (poitem_pohead_id=<? value("pohead_id") ?>)) 
+
+UNION
+
+SELECT 
+poitem_linenumber as f_number, 
+poitem_vend_item_number as f_item, 
+expcat_code as f_uom1,
+formatDate(poitem_duedate) as f_duedate,
+poitem_vend_item_descrip as f_vend_item,
+expcat_descrip as f_uom2,
+formatQty(poitem_qty_ordered) as f_ordered,
+formatqty(poitem_qty_received) as f_received
+FROM poitem, expcat
+WHERE ((poitem_expcat_id = expcat_id)
+AND (poitem_pohead_id=<? value("pohead_id") ?>)) 
+
+ORDER BY f_number;
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: PackingList-Shipment
 QUERY: head
 SELECT shiphead_number, 'S/O #:' AS ordertype,
        cohead_number AS ordernumber,
        formatsobarcode(cohead_id) AS order_barcode,
        COALESCE(shiphead_shipvia, cohead_shipvia) AS shipvia,
        cohead_shiptophone AS shiptophone,
        cohead_custponumber,
        formatDate(cohead_orderdate) AS orderdate,
        cohead_shipcomments AS shipcomments,   
        cohead_billtoname AS billtoname,
        formataddr(cohead_billtoaddress1, cohead_billtoaddress2,
                   cohead_billtoaddress3,
                   (cohead_billtocity || '  ' ||   cohead_billtostate ||
                   '  ' || cohead_billtozipcode), cohead_billtocountry) AS billing_address,
        cohead_shiptoname AS shiptoname,
        formataddr(cohead_shiptoaddress1, cohead_shiptoaddress2,
                   cohead_shiptoaddress3,
                   (cohead_shiptocity || '  ' ||   cohead_shiptostate ||
                   '  ' || cohead_shiptozipcode), cohead_shiptocountry) AS shipping_address,           
 
        cust_number,
        cust_contact,
        cust_phone,
        terms_descrip
   FROM shiphead, cohead, cust, terms
  WHERE ((cohead_cust_id=cust_id)
    AND (cohead_terms_id=terms_id)
    AND (cohead_id=shiphead_order_id)
    AND (shiphead_order_type='SO')
    AND (shiphead_id=<? value("shiphead_id") ?>)
 )
 <? if exists("MultiWhs") ?>
 UNION
 SELECT shiphead_number, 'T/O #:' AS ordertype,
        tohead_number AS ordernumber,
        formattobarcode(tohead_id) AS order_barcode,
        shiphead_shipvia AS shipvia,
        tohead_destphone AS shiptophone,
        TEXT(tohead_number) AS cohead_custponumber,
        formatDate(tohead_orderdate) AS orderdate,
        tohead_shipcomments AS shipcomments,
-       '' AS billtoname,
-       '' AS billing_address,
+       tohead_srcname AS billtoname,
+       formataddr(tohead_srcaddress1, tohead_srcaddress2,
+                   tohead_srcaddress3,
+                  (tohead_srccity || ' ' || tohead_srcstate ||
+                   ' ' || tohead_srcpostalcode), tohead_srccountry) AS billing_address,
        tohead_destname AS shiptoname,
        formataddr(tohead_destaddress1, tohead_destaddress2,
                    tohead_destaddress3,
                   (tohead_destcity || ' ' || tohead_deststate ||
                    ' ' || tohead_destpostalcode), tohead_destcountry) AS shipping_address,
        'Transfer Order' AS cust_number,
        tohead_destcntct_name AS cust_contact,
        tohead_destphone AS cust_phone,
        '' AS terms_descrip
   FROM shiphead, tohead
  WHERE ((tohead_id=shiphead_order_id)
    AND  (shiphead_order_type='TO')
    AND  (shiphead_id=<? value("shiphead_id") ?>)
 )
 <? endif ?>;
 --------------------------------------------------------------------
   
 QUERY: scheddate
 SELECT formatDate(MIN(coitem_scheddate)) AS scheddate
   FROM coitem, coship
  WHERE ((coitem_status <> 'X')
    AND  (coitem_id=coship_coitem_id)
    AND  (coship_cosmisc_id=<? value("coship_cosmisc_id") ?>));
 --------------------------------------------------------------------
   
 QUERY: detail
 SELECT 1 AS groupby,
 --     coitem_linenumber AS linenumber,
 --     In 3.1 replace line above with line below to support 
 --     kitting functionality
        formatsolinenumber(coitem_id) AS linenumber,
        coitem_memo AS memo,
        CASE WHEN (coitem_custpn != '') THEN coitem_custpn
             ELSE item_number
        END AS item_number,
        formatitemsitebarcode(itemsite_id) AS item_barcode,
        formatsoitembarcode(coitem_id) AS orderitem_barcode,
 --     In 2.3 replaced the next line:
 --     uom_name,
 --     with:
        (select uom_name from uom where uom_id = coitem_qty_uom_id) AS uom_name,
        itemsellinguom(item_id) AS shipuom,
        CASE WHEN (coitem_custpn != '' AND itemalias_usedescrip=TRUE) THEN itemalias_descrip1
             ELSE item_descrip1
        END AS item_descrip1,
        CASE WHEN (coitem_custpn != '' AND itemalias_usedescrip=TRUE) THEN itemalias_descrip2
             ELSE item_descrip2
        END AS item_descrip2,
 
        formatQty(coitem_qtyord) AS ordered,
        (SELECT formatQty(SUM(coship_qty)) FROM coship WHERE ((coship_cosmisc_id=<? value("cosmisc_id") ?>) AND (coship_coitem_id=coitem_id))) AS shipped,
 
        CASE WHEN (coitem_status='O' AND (SELECT cust_creditstatus
                                            FROM cust,cohead
                                           WHERE coitem_cohead_id=cohead_id
                                             AND cust_id=cohead_cust_id)='H') THEN 'H'
             WHEN (coitem_status='O' AND ((SELECT SUM(invcitem_billed)
                                             FROM cohead, invchead, invcitem
                                            WHERE ((invchead_ordernumber=cohead_number)
                                              AND  (invcitem_invchead_id=invchead_id)
                                              AND  (invcitem_item_id=item_id)
                                              AND  (invcitem_warehous_id=itemsite_warehous_id)
                                              AND  (invcitem_linenumber=coitem_linenumber)
                                              AND  (cohead_id=coitem_cohead_id))) >= coitem_qtyord)) THEN 'I'
             WHEN (coitem_status='O' AND ((SELECT SUM(invcitem_billed)
                                             FROM cohead, invchead, invcitem
                                            WHERE ((invchead_ordernumber=cohead_number)
                                              AND  (invcitem_invchead_id=invchead_id)
                                              AND  (invcitem_item_id=item_id)
                                              AND  (invcitem_warehous_id=itemsite_warehous_id)
                                              AND  (invcitem_linenumber=coitem_linenumber)
                                              AND  (cohead_id=coitem_cohead_id))) > 0)) THEN 'P'
             WHEN (coitem_status='O' AND (itemsite_qtyonhand - qtyAllocated(itemsite_id, CURRENT_DATE)
                                          + qtyOrdered(itemsite_id, CURRENT_DATE))
                                           >= (coitem_qtyord - coitem_qtyshipped + coitem_qtyreturned)) THEN 'R'
             ELSE coitem_status
        END AS f_status,
        CASE
          WHEN (getPacklistItemLotSerial(coship_cosmisc_id, coitem_id) = '') THEN
            ''
          ELSE
            'Serial #/Lot Information:'
        END AS lotserial_title,
        getPacklistItemLotSerial(coship_cosmisc_id, coitem_id) AS lotserial,
        CASE
          WHEN (getPacklistCharName(coship_cosmisc_id, coitem_id) = '') THEN
            ''
          ELSE
            'Characteristics:'
        END AS char_title,
        getPacklistCharName(coship_cosmisc_id, coitem_id) AS char_name,
        getPacklistCharValue(coship_cosmisc_id, coitem_id) AS char_value
   FROM coship
        JOIN coitem ON (coitem_id=coship_coitem_id)
        JOIN itemsite ON (itemsite_id=coitem_itemsite_id)
        JOIN item ON (item_id=itemsite_item_id)
        JOIN uom ON (uom_id=item_inv_uom_id)
        LEFT OUTER JOIN itemalias ON (itemalias_item_id=item_id AND itemalias_number=coitem_custpn) 
  WHERE ( (coitem_status <> 'X')
    AND (coship_cosmisc_id=<? value("cosmisc_id") ?>)
 )
 <? if exists("MultiWhs") ?>
 UNION
 SELECT 2 AS groupby,
 --     For 3.1 added CAST to match column type of corresponding column in other SELECT 
 --     in this UNION
        CAST(toitem_linenumber AS text) AS linenumber,
-       '' AS memo,
+       toitem_notes AS memo,
        item_number,
        formatitemsitebarcode(itemsite_id) AS item_barcode,
        formattoitembarcode(toitem_id) AS orderitem_barcode,
        uom_name,
        itemsellinguom(item_id) AS shipuom,
        item_descrip1,
        item_descrip2,
 
        formatQty(toitem_qty_ordered) AS ordered,
 
        (SELECT formatQty(SUM(shipitem_qty))
         FROM shipitem
         WHERE ((shipitem_shiphead_id=<? value("shiphead_id") ?>)
           AND  (shipitem_orderitem_id=toitem_id))
        ) AS shipped,
 
        toitem_status AS f_status,
        CASE
          WHEN (getPacklistItemLotSerial(shiphead_id, toitem_id) = '') THEN
            ''
          ELSE
            'Serial #/Lot Information:'
        END AS lotserial_title,
        getPacklistItemLotSerial(shiphead_id, toitem_id) AS lotserial,
        '' AS char_title,
        '' AS char_name,
        '' AS char_value
   FROM itemsite, item, toitem, tohead, shipitem, shiphead, uom
  WHERE ((toitem_item_id=item_id)
    AND  (item_inv_uom_id=uom_id)
    AND  (item_id=itemsite_item_id)
    AND  (toitem_tohead_id=tohead_id)
    AND  (toitem_status <> 'X')
    AND  (tohead_src_warehous_id=itemsite_warehous_id)
    AND  (toitem_id=shipitem_orderitem_id)
    AND  (shipitem_shiphead_id=shiphead_id)
    AND  (shiphead_order_type='TO')
    AND  (shiphead_id=<? value("shiphead_id") ?>)
 )
 <? endif ?>
 ORDER BY linenumber;
 --------------------------------------------------------------------
   
 QUERY: logo
 SELECT image_data 
 FROM image 
 WHERE ((image_name='logo'));
 --------------------------------------------------------------------
   
 QUERY: so_ra_relation
 --added in 2.3 to show RA link to S/O if the SO
 --was created as the result of a replacement RA
 select 
 'RA #' AS ratext,
 rahead_number
 from
 rahead, cohead, shiphead
 where 
 rahead_new_cohead_id = cohead_id
 and cohead_id = shiphead_order_id
 and shiphead_id = <? value("shiphead_id") ?>;
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: PackingList
 QUERY: head
 SELECT COALESCE(shiphead_number::TEXT, 'Not Issued To Shipping') AS shiphead_number,
 	      'S/O #:' AS ordertype,
        cohead_number AS ordernumber,
        formatsobarcode(cohead_id) AS order_barcode,
        COALESCE(shiphead_shipvia, cohead_shipvia) AS shipvia,
        cohead_shiptophone AS shiptophone,
        cohead_custponumber,
        formatDate(cohead_orderdate) AS orderdate,
        cohead_shipcomments AS shipcomments,
        cohead_billtoname AS billtoname,
        formataddr(cohead_billtoaddress1, cohead_billtoaddress2,
                   cohead_billtoaddress3,
                   (cohead_billtocity || '  ' ||   cohead_billtostate ||
                   '  ' || cohead_billtozipcode), cohead_billtocountry) AS billing_address,
        cohead_shiptoname AS shiptoname,
        formataddr(cohead_shiptoaddress1, cohead_shiptoaddress2,
                   cohead_shiptoaddress3,
                   (cohead_shiptocity || '  ' ||   cohead_shiptostate ||
                   '  ' || cohead_shiptozipcode), cohead_shiptocountry) AS shipping_address,           
 
        cust_number,
        cust_contact,
        cust_phone,
        terms_descrip
   FROM cust, terms, cohead
 <? if exists("shiphead_id") ?>
 	JOIN
 <? else ?>
 	LEFT OUTER JOIN
 <? endif ?>
        shiphead ON ((shiphead_id=<? value("shiphead_id") ?>)
 		AND (shiphead_order_id=cohead_id)
 		AND (shiphead_order_type='SO'))
  WHERE ((cohead_cust_id=cust_id)
    AND  (cohead_terms_id=terms_id)
 <? if exists("head_id") ?>
    AND  (<? value("head_type") ?>='SO')
    AND  (cohead_id=<? value("head_id") ?>)
 <? endif ?>
 )
 
 <? if exists("MultiWhs") ?>
 UNION
 SELECT COALESCE(shiphead_number::TEXT, 'Not Issued To Shipping') AS shiphead_number,
       'T/O #:' AS ordertype,
        tohead_number AS ordernumber,
        formattobarcode(tohead_id) AS order_barcode,
        COALESCE(shiphead_shipvia, tohead_shipvia) AS shipvia,
        tohead_destphone AS shiptophone,
        TEXT(tohead_number) AS cohead_custponumber,
        formatDate(tohead_orderdate) AS orderdate,
        tohead_shipcomments AS shipcomments,
-       '' AS billtoname,
-       '' AS billing_address,
+       tohead_srcname AS billtoname,
+       formataddr(tohead_srcaddress1, tohead_srcaddress2,
+                   tohead_srcaddress3,
+                  (tohead_srccity || ' ' || tohead_srcstate ||
+                   ' ' || tohead_srcpostalcode), tohead_srccountry) AS billing_address,
        tohead_destname AS shiptoname,
        formataddr(tohead_destaddress1, tohead_destaddress2,
                    tohead_destaddress3,
                   (tohead_destcity || ' ' || tohead_deststate ||
                    ' ' || tohead_destpostalcode), tohead_destcountry) AS shipping_address,
        'Transfer Order' AS cust_number,
        tohead_destcntct_name AS cust_contact,
        tohead_destphone AS cust_phone,
        '' AS terms_descrip
   FROM tohead 
 <? if exists("shiphead_id") ?>
 	JOIN
 <? else ?>
 	LEFT OUTER JOIN
 <? endif ?>
        shiphead ON ((shiphead_id=<? value("shiphead_id") ?>)
 		AND (shiphead_order_id=tohead_id)
 		AND (shiphead_order_type='TO'))
 <? if exists("head_id") ?>
  WHERE ((<? value("head_type") ?>='TO')
    AND  (tohead_id=<? value("head_id") ?>)
    )
 <? endif ?>
 <? endif ?>;
 --------------------------------------------------------------------
   
 QUERY: scheddate
 SELECT formatDate(MIN(orderitem_scheddate)) AS scheddate
   FROM orderitem
        <? if exists("shiphead_id") ?>
        JOIN shiphead ON ((orderitem_orderhead_type=shiphead_order_type)
 		     AND (orderitem_orderhead_id=shiphead_order_id)
 		     AND (shiphead_id=<? value("shiphead_id")?>))
        JOIN shipitem ON ((shiphead_id=shipitem_shiphead_id)
 		     AND (shipitem_orderitem_id=orderitem_id))
        <? endif ?>
  WHERE ((orderitem_status <> 'X')
 <? if exists("head_id") ?>
    AND  (orderitem_orderhead_type=<? value("head_type") ?>)
    AND  (orderitem_orderhead_id=<? value("head_id") ?>)
 <? endif ?>
  );
 --------------------------------------------------------------------
   
 QUERY: detail
 SELECT 1 AS groupby,
        coitem_linenumber AS linenumber,
        coitem_memo AS memo,
        CASE WHEN (coitem_custpn != '') THEN coitem_custpn
             ELSE item_number
        END AS item_number,
        formatitemsitebarcode(itemsite_id) AS item_barcode,
        formatsoitembarcode(coitem_id) AS orderitem_barcode,
        (select uom_name from uom where uom_id = coitem_qty_uom_id) AS uom_name,
        itemsellinguom(item_id) AS shipuom,
        CASE WHEN (coitem_custpn != '' AND itemalias_usedescrip=TRUE) THEN itemalias_descrip1
             ELSE item_descrip1
        END AS item_descrip1,
        CASE WHEN (coitem_custpn != '' AND itemalias_usedescrip=TRUE) THEN itemalias_descrip2
             ELSE item_descrip2
        END AS item_descrip2,
        formatQty(coitem_qtyord) AS ordered,
        ( SELECT formatQty(COALESCE(SUM(shipitem_qty), 0))
          FROM shipitem JOIN shiphead ON (shiphead_id=shipitem_shiphead_id)
          WHERE ((shipitem_orderitem_id=coitem_id) AND (shiphead_order_type='SO')) ) AS atShipping,
 
        CASE WHEN (coitem_status='O' AND (SELECT cust_creditstatus
                                            FROM cust,cohead
                                           WHERE coitem_cohead_id=cohead_id
                                             AND cust_id=cohead_cust_id)='H') THEN 'H'
             WHEN (coitem_status='O' AND ((SELECT SUM(invcitem_billed)
                                             FROM cohead, invchead, invcitem
                                            WHERE ((invchead_ordernumber=cohead_number)
                                              AND  (invcitem_invchead_id=invchead_id)
                                              AND  (invcitem_item_id=item_id)
                                              AND  (invcitem_warehous_id=itemsite_warehous_id)
                                              AND  (invcitem_linenumber=coitem_linenumber)
                                              AND  (cohead_id=coitem_cohead_id))) >= coitem_qtyord)) THEN 'I'
             WHEN (coitem_status='O' AND ((SELECT SUM(invcitem_billed)
                                             FROM cohead, invchead, invcitem
                                            WHERE ((invchead_ordernumber=cohead_number)
                                              AND  (invcitem_invchead_id=invchead_id)
                                              AND  (invcitem_item_id=item_id)
                                              AND  (invcitem_warehous_id=itemsite_warehous_id)
                                              AND  (invcitem_linenumber=coitem_linenumber)
                                              AND  (cohead_id=coitem_cohead_id))) > 0)) THEN 'P'
             WHEN (coitem_status='O' AND (itemsite_qtyonhand - qtyAllocated(itemsite_id, CURRENT_DATE)
                                          + qtyOrdered(itemsite_id, CURRENT_DATE))
                                           >= (coitem_qtyord - coitem_qtyshipped + coitem_qtyreturned)) THEN 'R'
             ELSE coitem_status
        END AS f_status
   FROM coitem
        JOIN itemsite ON (itemsite_id=coitem_itemsite_id)
        JOIN item ON (item_id=itemsite_item_id)
        JOIN uom ON (uom_id=item_inv_uom_id)
        LEFT OUTER JOIN itemalias ON (itemalias_item_id=item_id AND itemalias_number=coitem_custpn) 
  WHERE ( (coitem_status <> 'X')
 <? if exists("shiphead_id") ?>
    AND  (coitem_cohead_id IN (SELECT shiphead_order_id FROM shiphead
 			      WHERE ((shiphead_id=<? value("shiphead_id") ?>)
 			        AND  (shiphead_order_type='SO'))))
 <? endif ?>
 <? if exists("head_id") ?>
    AND  (<? value("head_type") ?>='SO')
    AND  (coitem_cohead_id=<? value("head_id") ?>)
 <? endif ?>
 )
 GROUP BY coitem_qty_uom_id, coitem_linenumber, coitem_id, coitem_memo, item_number, uom_name, shipuom,
          coitem_custpn, itemalias_usedescrip, itemalias_descrip1, itemalias_descrip2,
          item_descrip1, item_descrip2, coitem_qtyord, coitem_qty_invuomratio, coitem_qtyshipped,
          coitem_qtyreturned, coitem_status, coitem_cohead_id,
          itemsite_id, itemsite_qtyonhand, itemsite_warehous_id, item_id
 <? if exists("MultiWhs") ?>
 UNION
 SELECT 2 AS groupby,
        toitem_linenumber AS linenumber,
-       '' AS memo,
+       toitem_notes AS memo,
        item_number,
        formatitemsitebarcode(itemsite_id) AS item_barcode,
        formattoitembarcode(toitem_id) AS orderitem_barcode,
        uom_name,
        itemsellinguom(item_id) AS shipuom,
        item_descrip1,
        item_descrip2,
 
        formatQty(toitem_qty_ordered) AS ordered,
        ( SELECT formatQty(COALESCE(SUM(shipitem_qty), 0))
          FROM shipitem JOIN shiphead ON (shiphead_id=shipitem_shiphead_id)
          WHERE ((shipitem_orderitem_id=toitem_id) AND (shiphead_order_type='TO')) ) AS atShipping,
 
        toitem_status AS f_status
   FROM itemsite, item, toitem, tohead, uom
  WHERE ((toitem_item_id=item_id)
    AND  (item_inv_uom_id=uom_id)
    AND  (item_id=itemsite_item_id)
    AND  (toitem_tohead_id=tohead_id)
    AND  (toitem_status <> 'X')
    AND  (tohead_src_warehous_id=itemsite_warehous_id)
 <? if exists("shiphead_id") ?>
    AND  (toitem_tohead_id IN (SELECT shiphead_order_id FROM shiphead
 			      WHERE ((shiphead_id=<? value("shiphead_id") ?>)
 			        AND  (shiphead_order_type='TO'))))
 <? endif ?>
 <? if exists("head_id") ?>
    AND  (<? value("head_type") ?>='TO')
    AND  (toitem_tohead_id=<? value("head_id") ?>)
 <? endif ?>
 )
 <? endif ?>
 ORDER BY linenumber;
 --------------------------------------------------------------------
   
 QUERY: logo
 SELECT image_data 
 FROM image 
 WHERE ((image_name='logo'));
 --------------------------------------------------------------------
   
 QUERY: lotdetail
 SELECT
 shiphead_number AS cosmisc_number,
 (orderhead_number || '-' || orderitem_linenumber) AS ordernumber,
 item_number,
 formatlotserialnumber(invdetail_ls_id) AS invdetail_lotserial,
 SUM(invdetail_qty) * -1 AS lotqty,
 SUM(invhist_invqty) as totalshipmentqty,
 invhist_transtype,
 formatdate(MAX(invhist_transdate)) AS invhistdate,
 formatdate(MAX(shipitem_transdate)) AS shiptransdate
 FROM shiphead,shipitem,invhist,invdetail,orderhead,orderitem,itemsite,item
 WHERE ( (shiphead_id = <? value("cosmisc_id") ?> )
 AND (shipitem_shiphead_id=shiphead_id)
 AND (invhist_id=shipitem_invhist_id)
 AND (invdetail_invhist_id=invhist_id)
 AND (orderhead_type=shiphead_order_type)
 AND (orderhead_id=shiphead_order_id)
 AND (orderitem_orderhead_type=shiphead_order_type)
 AND (orderitem_id=shipitem_orderitem_id)
 AND (itemsite_id=orderitem_itemsite_id)
 AND (item_id=itemsite_item_id)
 )
 GROUP BY shiphead_number,orderhead_number,item_number,invdetail_ls_id,
 orderitem_linenumber,invhist_transtype
 ORDER BY ordernumber;
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: PendingBOMChanges
 QUERY: head
 SELECT item_number,
        uom_name,
        item_descrip1,
        item_descrip2,
-       CASE WHEN (<? value("cutOffDate") ?> >= date('12/31/2099')) THEN text('Latest')
+       CASE WHEN (<? value("cutOffDate") ?> >= date('2099-12-31')) THEN text('Latest')
             ELSE formatDate(<? value("cutOffDate") ?>)
        END AS cutoffdate
   FROM item JOIN uom ON (item_inv_uom_id=uom_id)
  WHERE (item_id=<? value("item_id") ?>);
     
 --------------------------------------------------------------------
   
 QUERY: detail
 SELECT formatDate(bomitem_effective) as actiondate,
        'Effective' AS action,
        bomitem_seqnumber, item_number, uom_name,
        item_descrip1, item_descrip2, uom_name,
        formatQtyPer(itemuomtouom(bomitem_item_id, bomitem_uom_id, NULL, bomitem_qtyper)) AS qtyper,
        formatScrap(bomitem_scrap) AS scrap,
        formatQtyPer(itemuomtouom(bomitem_item_id, bomitem_uom_id, NULL, bomitem_qtyper + (1 * bomitem_scrap))) AS qtyreq,
        formatDate(bomitem_effective, 'Always') AS effective,
        formatDate(bomitem_expires, 'Never') AS expires,
        formatBoolYN(bomitem_createwo) AS createchild,
        CASE WHEN (bomitem_issuemethod='S') THEN 'Push'
             WHEN (bomitem_issuemethod='L') THEN 'Pull'
             WHEN (bomitem_issuemethod='M') THEN 'Mixed'
             ELSE 'Special'
        END AS issuemethod
   FROM bomitem(<? value("item_id") ?>,<? value("revision_id") ?>), item, uom
  WHERE ((bomitem_item_id=item_id)
    AND (item_inv_uom_id=uom_id)
    AND (bomitem_effective BETWEEN CURRENT_DATE AND <? value("cutOffDate") ?>)
 )
 UNION
 SELECT formatDate(bomitem_expires) as actiondate,
        'Expires' AS action,
        bomitem_seqnumber, item_number, uom_name,
        item_descrip1, item_descrip2, uom_name,
        formatQtyPer(itemuomtouom(bomitem_item_id, bomitem_uom_id, NULL, bomitem_qtyper)) AS qtyper,
        formatScrap(bomitem_scrap) AS scrap,
        formatQtyPer(itemuomtouom(bomitem_item_id, bomitem_uom_id, NULL, bomitem_qtyper + (1 * bomitem_scrap))) AS qtyreq,
        formatDate(bomitem_effective, 'Always') AS effective,
        formatDate(bomitem_expires, 'Never') AS expires,
        formatBoolYN(bomitem_createwo) AS createchild,
        CASE WHEN (bomitem_issuemethod='S') THEN 'Push'
             WHEN (bomitem_issuemethod='L') THEN 'Pull'
             WHEN (bomitem_issuemethod='M') THEN 'Mixed'
             ELSE 'Special'
        END AS issuemethod
 FROM bomitem(<? value("item_id") ?>,<? value("revision_id") ?>), item, uom
 WHERE ((bomitem_item_id=item_id)
  AND (item_inv_uom_id=uom_id)
  AND (bomitem_expires BETWEEN CURRENT_DATE AND <? value("cutOffDate") ?>)
 )
 ORDER BY action, actiondate, bomitem_seqnumber;
     
 --------------------------------------------------------------------
   
 QUERY: bomhead
 SELECT bomhead_docnum, bomhead_revision,
 formatDate(bomhead_revisiondate) AS f_revisiondate
 FROM bomhead
 WHERE ((bomhead_item_id=<? value("item_id") ?>)
 AND (bomhead_rev_id=<? value("revision_id") ?>));
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: Quote
 QUERY: head
 SELECT quhead_number,
        quhead_shipvia,
        formatDate(quhead_quotedate) as f_orderdate,
        formatDate(quhead_packdate) as f_packdate,
        CASE WHEN(quhead_origin='C') THEN 'Customer'
             WHEN(quhead_origin='I') THEN 'Internet'
             WHEN(quhead_origin='S') THEN 'Sales Rep.'
             ELSE quhead_origin
        END AS f_origin,
        salesrep_name,
        formatScrap(quhead_commission) as f_commission,
        (terms_code||' - '||terms_descrip) as f_terms,
        cust_number,
        quhead_billtoname,
        formatAddr(quhead_billtoaddress1,
                   quhead_billtoaddress2,
                   quhead_billtoaddress3,
                  (quhead_billtocity || ', ' || quhead_billtostate || ' ' || quhead_billtozip),
                   quhead_billtocountry) AS f_billtoaddress,
        CASE WHEN(quhead_shipto_id=-1) THEN text('')
             ELSE (select text(shipto_num) from shipto where shipto_id=quhead_shipto_id)
        END AS f_shiptonum,
        quhead_shiptoname,
        formatAddr(quhead_shiptoaddress1,
                   quhead_shiptoaddress2,
                   quhead_shiptoaddress3,
                  (quhead_shiptocity || ', ' || quhead_shiptostate || ' ' || quhead_shiptozipcode),
                   quhead_shiptocountry) AS f_shiptoaddress,
        quhead_custponumber,
        quhead_fob
 FROM quhead
      LEFT OUTER JOIN cust ON (quhead_cust_id = cust_id)
      LEFT OUTER JOIN terms ON (quhead_terms_id = terms_id)
      LEFT OUTER JOIN salesrep ON (quhead_salesrep_id = salesrep_id)
 WHERE (quhead_id = <? value("quhead_id") ?>)
 
 --------------------------------------------------------------------
   
 QUERY: notes
 SELECT quhead_ordercomments,
        quhead_shipcomments
   FROM quhead
  WHERE (quhead_id=<? value("quhead_id") ?>);
 --------------------------------------------------------------------
   
 QUERY: items
 SELECT quitem_id,
        quitem_linenumber,
        quitem_custpn, 
        item_number,
        item_descrip1,
        --The following 2 lines are new in 2.3
        (select uom_name from uom where uom_id = quitem_qty_uom_id) AS uom_ordered,
        (select uom_name from uom where uom_id = quitem_price_uom_id) AS uom_pricing,
        warehous_code,
        formatQty(quitem_qtyord) as f_ordered,
        formatPrice(quitem_price) as f_price,
        --The following line was changed in 2.3 from:
        --formatExtprice(quitem_qtyord * (quitem_price / iteminvpricerat(item_id))) as f_extprice
        --To:
        formatExtprice((quitem_qtyord * quitem_qty_invuomratio) * (quitem_price / quitem_price_invuomratio)) as f_extprice,
        quitem_memo,
        char_name, 
        charass_value 
 FROM quitem
      JOIN item ON (item_id=quitem_item_id)
      LEFT OUTER JOIN (itemsite JOIN warehous ON (itemsite_warehous_id=warehous_id)) ON (quitem_itemsite_id=itemsite_id)
      LEFT OUTER JOIN charass ON ((charass_target_id = quitem_id) 
                             AND (charass_target_type = 'QI'))
      LEFT OUTER JOIN char ON (charass_char_id = char_id)
 WHERE (quitem_quhead_id=<? value("quhead_id") ?>) 
 ORDER BY quitem_linenumber;
 --------------------------------------------------------------------
   
 QUERY: totals
 SELECT 1 as one,
        formatExtPrice(subtotal) AS f_subtotal,
        formatExtPrice(tax) AS f_tax,
        formatExtPrice(quhead_freight) AS f_freight,
        formatExtPrice(quhead_misc) AS f_misc,
-       formatExtPrice(subtotal + tax + quhead_freight) AS f_total
+       formatExtPrice(subtotal + tax + quhead_freight + quhead_misc) AS f_total
   FROM quhead,
        (SELECT SUM((quitem_qtyord * quitem_qty_invuomratio) * (quitem_price / quitem_price_invuomratio)) AS subtotal
           FROM quitem
          WHERE (quitem_quhead_id=<? value("quhead_id") ?>) ) AS subtot,
        (SELECT COALESCE(SUM(tax),0) AS tax 
         FROM (
           SELECT ROUND(SUM(taxdetail_tax),2) AS tax 
           FROM tax 
           JOIN calculateTaxDetailSummary('Q', <? value("quhead_id") ?>, 'T') ON (taxdetail_tax_id=tax_id)
 	GROUP BY tax_id) AS data) AS taxtot
        
 
 
  WHERE (quhead_id=<? value("quhead_id") ?>);
 
 
 --------------------------------------------------------------------
   
 QUERY: logo
 SELECT image_data 
 FROM image 
 WHERE ((image_name='logo'));
 --------------------------------------------------------------------
   
 QUERY: currency_info
 --this was added in version 2.3
 SELECT curr_name,
        curr_symbol,
        curr_abbr
 FROM quhead, curr_symbol
 WHERE ( (quhead_curr_id = curr_id)
   AND   (quhead_id = <? value("quhead_id") ?>) );
 --------------------------------------------------------------------
   
 QUERY: address
 SELECT warehous_descrip,
        formatAddr(addr_line1,
                   addr_line2,
                   addr_line3,
                  (addr_city || '  ' || addr_state || '  ' || addr_postalcode),
                   addr_country) AS warehouse_address
 FROM whsinfo, 
      addr, 
      quhead
 WHERE ( (addr_id = warehous_addr_id)
   AND   (quhead_warehous_id = warehous_id)
   AND   (quhead_id=<? value("quhead_id") ?>) );
 --------------------------------------------------------------------
   
 QUERY: contact_fax_phone
 SELECT cntct_fax,
        cntct_phone
 FROM cntct, quhead, custinfo
 WHERE ( (cust_id = quhead_cust_id)
   AND   (cust_cntct_id = cntct_id)
   AND   (quhead_id = <? value("quhead_id") ?>) );
 
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: RunningAvailability
 QUERY: head
 SELECT item_number,
        item_descrip1,
        item_descrip2,
        uom_name,
        warehous_code AS warehouse,
        <? if exists("showPlanned") ?>
          text('Yes')
        <? else ?>
          text('No')
        <? endif ?>
        AS showplnord
   FROM item, uom, warehous
  WHERE ((item_id=<? value("item_id") ?>)
    AND (item_inv_uom_id=uom_id)
    AND (warehous_id=<? value("warehous_id") ?>))
 --------------------------------------------------------------------
   
 QUERY: detail
 <? if exists("MultiWhs") ?>
 SELECT tohead_id AS orderid, toitem_id AS altorderid, 'T/O' AS ordertype,
        TEXT(tohead_number) AS ordernumber,
        1 AS sequence,
        tohead_srcname || '/' || tohead_destname AS item_number,
        formatDate(toitem_duedate) AS duedate,
        toitem_duedate AS r_duedate,
        (toitem_duedate < CURRENT_DATE) AS late,
        formatQty(toitem_qty_ordered) AS f_qtyordered,
        formatQty(toitem_qty_received) AS f_qtyreceived,
        formatQty(noNeg(toitem_qty_ordered - toitem_qty_received)) AS f_balance,
        noNeg(toitem_qty_ordered - toitem_qty_received) AS balance
 FROM tohead, toitem
 WHERE ((toitem_tohead_id=tohead_id)
   AND  (toitem_status = 'O')
   AND  (toitem_item_id=<? value("item_id") ?>)
   AND  (tohead_dest_warehous_id=<? value("warehous_id") ?>)
   AND  (toitem_qty_ordered > toitem_qty_received) )
 
 UNION
 SELECT tohead_id AS orderid, toitem_id AS altorderid, 'T/O' AS ordertype,
        TEXT(tohead_number) AS ordernumber,
        1 AS sequence,
        tohead_srcname || '/' || tohead_destname AS item_number,
        formatDate(toitem_duedate) AS duedate,
        toitem_duedate AS r_duedate,
        (toitem_duedate < CURRENT_DATE) AS late,
        formatQty(toitem_qty_ordered) AS f_qtyordered,
        formatQty(toitem_qty_received) AS f_qtyreceived,
        formatQty(-1 * noNeg(toitem_qty_ordered - toitem_qty_shipped - qtyAtShipping('TO', toitem_id))) AS f_balance,
        -1 * noNeg(toitem_qty_ordered - toitem_qty_received) AS balance
 FROM tohead, toitem
 WHERE ((toitem_tohead_id=tohead_id)
   AND  (toitem_status = 'O')
   AND  (toitem_item_id=<? value("item_id") ?>)
   AND  (tohead_src_warehous_id=<? value("warehous_id") ?>)
   AND  (toitem_qty_ordered - toitem_qty_shipped - qtyAtShipping('TO', toitem_id)) > 0 )
 
 UNION
 <? endif ?>
 SELECT wo_id AS orderid, -1 AS altorderid,
        'W/O' AS ordertype,
        formatWoNumber(wo_id) AS ordernumber,
        1 AS sequence,
        item_number,
        formatDate(wo_duedate) AS duedate,
        wo_duedate AS r_duedate,
        (wo_duedate < CURRENT_DATE) AS late,
        formatQty(wo_qtyord) AS f_qtyordered,
        formatQty(wo_qtyrcv) AS f_qtyreceived,
        formatQty(noNeg(wo_qtyord - wo_qtyrcv)) AS f_balance,
        noNeg(wo_qtyord - wo_qtyrcv) AS balance
 FROM wo, itemsite, item
 WHERE ((wo_status<>'C')
   AND  (wo_itemsite_id=itemsite_id)
   AND  (itemsite_item_id=item_id)
   AND  (itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (itemsite_item_id=<? value("item_id") ?>)
   AND  (item_type NOT IN ('C', 'Y')))
 
+<? if exists("Manufacturing") ?>
 UNION
 SELECT wo_id AS orderid, -1 AS altorderid,
        'W/O' AS ordertype,
        formatWoNumber(wo_id) AS ordernumber,
        1 AS sequence,
        item_number,
        formatDate(wo_duedate) AS duedate,
        wo_duedate AS r_duedate,
        (wo_duedate < CURRENT_DATE) AS late,
        formatQty(wo_qtyord * brddist_stdqtyper) AS f_qtyordered,
        formatQty(wo_qtyrcv * brddist_stdqtyper) AS f_qtyreceived,
        formatQty(noNeg((wo_qtyord - wo_qtyrcv) * brddist_stdqtyper)) AS f_balance,
        noNeg((wo_qtyord - wo_qtyrcv) * brddist_stdqtyper) AS balance
-FROM brddist, wo, itemsite, item
+FROM xtmfg.brddist, wo, itemsite, item
 WHERE ((wo_status<>'C')
   AND  (brddist_wo_id=wo_id)
   AND  (wo_itemsite_id=itemsite_id)
   AND  (itemsite_item_id=item_id)
   AND  (brddist_itemsite_id=itemsite_id)
   AND  (itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (itemsite_item_id=<? value("item_id") ?>)
   AND  (item_type IN ('C', 'Y')) )
+<? endif ?>
 
 UNION
 SELECT wo_id AS orderid, womatl_id AS altorderid,
       'W/O' AS ordertype,
       formatWoNumber(wo_id) AS ordernumber,
       2 AS sequence,
       item_number,
       formatDate(womatl_duedate) AS duedate,
       womatl_duedate AS r_duedate,
       FALSE AS late,
       formatQty(itemuomtouom(womatlis.itemsite_item_id, womatl_uom_id, NULL, womatl_qtyreq)) AS f_qtyordered,
       formatQty(itemuomtouom(womatlis.itemsite_item_id, womatl_uom_id, NULL, womatl_qtyiss)) AS f_qtyreceived,
       formatQty(itemuomtouom(womatlis.itemsite_item_id, womatl_uom_id, NULL, (noNeg(womatl_qtyreq - womatl_qtyiss) * -1))) AS f_balance,
       itemuomtouom(womatlis.itemsite_item_id, womatl_uom_id, NULL, (noNeg(womatl_qtyreq - womatl_qtyiss) * -1)) AS balance
 FROM womatl, wo, itemsite AS wois, item, itemsite AS womatlis
 WHERE ((wo_status<>'C')
   AND  (wo_itemsite_id=wois.itemsite_id)
   AND  (wois.itemsite_item_id=item_id)
   AND  (womatl_wo_id=wo_id)
   AND  (womatlis.itemsite_item_id=<? value("item_id") ?>)
   AND  (womatlis.itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (womatl_itemsite_id=womatlis.itemsite_id) )
 
 UNION
 SELECT pohead_id AS orderid, poitem_id AS altorderid,
       'P/O' AS ordertype,
       TEXT(pohead_number) AS ordernumber,
       1 AS sequence,
       '' AS item_number,
       formatDate(poitem_duedate) AS duedate,
       poitem_duedate AS r_duedate,
       (poitem_duedate < CURRENT_DATE) AS late,
       formatQty(poitem_qty_ordered * poitem_invvenduomratio) AS f_qtyordered,
       formatQty(poitem_qty_received * poitem_invvenduomratio) AS f_qtyreceived,
       formatQty(noNeg(poitem_qty_ordered - poitem_qty_received) * poitem_invvenduomratio) AS f_balance,
       (noNeg(poitem_qty_ordered - poitem_qty_received) * poitem_invvenduomratio) AS balance
 FROM pohead, poitem, itemsite, item
 WHERE ((poitem_pohead_id=pohead_id)
   AND  (poitem_status <> 'C')
   AND  (poitem_itemsite_id=itemsite_id)
   AND  (itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (itemsite_item_id=item_id)
   AND  (item_id=<? value("item_id") ?>)
   AND  (item_type IN ('P', 'M', 'C', 'O')) )
 
 UNION
 SELECT cohead_id AS orderid, coitem_id AS altorderid,
        'S/O' AS ordertype,
        TEXT(cohead_number) AS ordernumber,
        2 AS sequence,
        cust_name AS item_number,
        formatDate(coitem_scheddate) AS duedate,
        coitem_scheddate AS r_duedate,
        (coitem_scheddate < CURRENT_DATE) AS late,
        formatQty(coitem_qty_invuomratio * coitem_qtyord) AS f_qtyordered,
        formatQty(coitem_qty_invuomratio * (coitem_qtyshipped - coitem_qtyreturned + qtyAtShipping(coitem_id))) AS f_qtyreceived,
        formatQty(coitem_qty_invuomratio * noNeg(coitem_qtyord - coitem_qtyshipped + coitem_qtyreturned - qtyAtShipping(coitem_id)) * -1) AS f_balance,
        (coitem_qty_invuomratio * noNeg(coitem_qtyord - coitem_qtyshipped + coitem_qtyreturned - qtyAtShipping(coitem_id)) * -1) AS balance
 FROM coitem, cohead, cust, itemsite, item
 WHERE ((coitem_status='O')
   AND  (cohead_cust_id=cust_id)
   AND  (coitem_cohead_id=cohead_id)
   AND  (coitem_itemsite_id=itemsite_id)
   AND  (itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (itemsite_item_id=item_id)
   AND  (item_id=<? value("item_id") ?>)
   AND  item_sold )
 
 <? if exists("showPlanned") ?>
 <? if exists("showMRPplan") ?>
 UNION
 SELECT planord_id AS orderid, -1 AS altorderid,
        'Planned P/O' AS ordertype,
 --       CASE WHEN (planord_firm) THEN <? value("firmPo") ?>
 -- 	   ELSE <? value("plannedPo") ?>
 --       END AS ordernumber,
 --2.3 replaced case above with actual order number for higher level demand
        CAST(planord_number AS text) AS ordernumber,
        1 AS sequence,
        '' AS item_number,
        formatDate(planord_duedate) AS duedate,
        planord_duedate AS r_duedate,
        FALSE AS late,
        formatQty(planord_qty) AS f_qtyordered,
        '' AS f_qtyreceived,
        formatQty(planord_qty) AS f_balance,
        planord_qty AS balance
 FROM planord, itemsite
 WHERE ((planord_type='P')
   AND  (planord_itemsite_id=itemsite_id)
   AND  (itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (itemsite_item_id=<? value("item_id") ?>) )
 
 UNION
 SELECT planord_id AS orderid, -1 AS altorderid,
        'Planned W/O' AS ordertype,
 --       CASE WHEN (planord_firm) THEN <? value("firmWo") ?>
 --	    ELSE <? value("plannedWo") ?>
 --       END AS ordernumber,
 --2.3 replaced case above with actual order number
        CAST(planord_number AS text) AS ordernumber,
        1 AS sequence,
        '' AS item_number,
        formatDate(planord_duedate) AS duedate,
        planord_duedate AS r_duedate,
        FALSE AS late,
        formatQty(planord_qty) AS f_qtyordered,
        '' AS f_qtyreceived,
        formatQty(planord_qty) AS f_balance,
        planord_qty AS balance
 FROM planord, itemsite
 WHERE ((planord_type='W')
   AND  (planord_itemsite_id=itemsite_id)
   AND  (itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (itemsite_item_id=<? value("item_id") ?>) )
 
 UNION
 SELECT planreq_id AS orderid, -1 AS altorderid,
        'Planned W/O' AS ordertype,
 --       CASE WHEN (planord_firm) THEN <? value("firmWoReq") ?>
 --	    ELSE <? value("plannedWoReq") ?>
 --       END AS ordernumber,
 --2.3 replaced case above with actual order number for higher level demand
        CAST(planord_number AS text) AS ordernumber,
        1 AS sequence,
 --2.3 Start
 --Starting here a sub-select gets the planned order number for the higher level demand
              (SELECT item_number
                 FROM item, itemsite
                WHERE((itemsite_item_id=item_id)
                  AND (itemsite_id=planord_itemsite_id))
              ) AS item_number,
 --End of subselect to get higher level item number
 --2.3 Start
        formatDate(planord_startdate) AS duedate,
        planord_startdate AS r_duedate,
        FALSE AS late,
        formatQty(planreq_qty) AS f_qtyordered,
        '' AS f_qtyreceived,
        formatQty(planreq_qty * -1) AS f_balance,
        (planreq_qty * -1) AS balance
 FROM planreq, planord, itemsite, item
 WHERE ((planreq_source='P')
   AND  (planreq_source_id=planord_id)
   AND  (planreq_itemsite_id=itemsite_id)
   AND  (itemsite_item_id=item_id)
   AND  (itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (itemsite_item_id=<? value("item_id") ?>) )
 <? endif ?>
 
 UNION
 SELECT pr_id AS orderid, -1 AS altorderid,
        'P/R' AS ordertype,
 --       <? value("pr") ?> AS ordernumber,
 --2.3 replaced above with actual order number
        CAST(pr_number AS text) AS ordernumber,       
        1 AS sequence,
        '' AS item_number,
        formatDate(pr_duedate) AS duedate,
        pr_duedate AS r_duedate,
        FALSE AS late,
        formatQty(pr_qtyreq) AS f_qtyordered,
        '' AS f_qtyreceived,
        formatQty(pr_qtyreq) AS f_balance,
        pr_qtyreq AS balance
 FROM pr, itemsite, item
 WHERE ((pr_itemsite_id=itemsite_id)
   AND  (itemsite_item_id=item_id)
   AND  (pr_itemsite_id=itemsite_id)
   AND  (itemsite_warehous_id=<? value("warehous_id") ?>)
   AND  (itemsite_item_id=<? value("item_id") ?>) )
 <? endif ?>
 
 UNION 
 
 SELECT -1 AS orderid, -1 AS altorderid,
              '' AS ordertype,
              '' AS ordernumber,
              -1 AS sequence,
              'Initial QOH' AS item_number,
              '' AS duedate,
              date('1/1/1978') AS r_duedate,
              FALSE AS late,
              '' AS f_qtyordered,
              '' AS f_qtyreceived,
              '' AS f_balance,
              itemsite_qtyonhand AS balance
         FROM itemsite
        WHERE ((itemsite_item_id=<? value("item_id") ?>)
          AND (itemsite_warehous_id=<? value("warehous_id") ?>))
 
 ORDER BY r_duedate, sequence;
 
 
 --------------------------------------------------------------------
   
 QUERY: info
 SELECT
        formatQty(itemsite_qtyonhand) AS qoh,
        formatQty(CASE WHEN(itemsite_useparams) THEN itemsite_reorderlevel ELSE 0.0 END) AS reorderlevel,
        formatQty(CASE WHEN(itemsite_useparams) THEN itemsite_ordertoqty ELSE 0.0 END) AS ordertoqty,
        formatQty(CASE WHEN(itemsite_useparams) THEN itemsite_multordqty ELSE 0.0 END) AS multorderqty 
 FROM itemsite 
 WHERE ((itemsite_item_id=<? value("item_id") ?>)
  AND (itemsite_warehous_id=<? value("warehous_id") ?>));
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: SingleLevelBOM
 QUERY: head
 SELECT item_number, uom_name AS item_invuom, item_descrip1, item_descrip2
 FROM item, uom
 WHERE ((item_id=<? value("item_id") ?>)
 AND (item_inv_uom_id=uom_id));
     
 --------------------------------------------------------------------
   
 QUERY: detail
 SELECT bomitem_seqnumber, item_number,
-       uom_name AS item_invuom, item_descrip1, item_descrip2,
+       invuom.uom_name AS invuomname, issueuom.uom_name AS issueuomname,
+       item_descrip1, item_descrip2,
        formatBoolYN(bomitem_createwo) AS createchild,
        CASE WHEN (bomitem_issuemethod='S') THEN 'Push'
             WHEN (bomitem_issuemethod='L') THEN 'Pull'
             WHEN (bomitem_issuemethod='M') THEN 'Mixed'
             ELSE 'Special'
        END AS issuemethod,
-       formatQtyPer(itemuomtouom(bomitem_item_id, bomitem_uom_id, NULL, bomitem_qtyper)) AS qtyper,
+       formatQtyPer(bomitem_qtyper) AS issueqtyper,
+       formatQtyPer(itemuomtouom(bomitem_item_id, bomitem_uom_id, NULL, bomitem_qtyper)) AS invqtyper,
        formatScrap(bomitem_scrap) AS scrap,
-       formatQtyPer(itemuomtouom(bomitem_item_id, bomitem_uom_id, NULL, bomitem_qtyper) * (1 + bomitem_scrap)) AS qtyreq,
+       formatQtyPer(bomitem_qtyper * (1 + bomitem_scrap)) AS qtyreq,
        formatDate(bomitem_effective, <? value("always") ?>) AS effective,
        formatDate(bomitem_expires, <? value("never") ?>) AS expires,
        bomitem_ecn
 <? if exists("revision_id") ?>
   FROM bomitem(<? value("item_id") ?>,<? value("revision_id") ?>)
 <? else ?>
   FROM bomitem(<? value("item_id") ?>)
 <? endif ?>
-, item, uom
+, item, uom AS issueuom, uom AS invuom
 WHERE ((bomitem_item_id=item_id)
-AND (item_inv_uom_id=uom_id)
+AND (item_inv_uom_id=invuom.uom_id)
+AND (bomitem_uom_id=issueuom.uom_id)
 <? if exists("expiredDays") ?>
  AND (bomitem_expires > (CURRENT_DATE - <? value("expiredDays") ?>))
 <? else ?>
  AND (bomitem_expires > CURRENT_DATE)
 <? endif ?>
 
 <? if exists("effectiveDays") ?>
  AND (bomitem_effective <= (CURRENT_DATE + <? value("effectiveDays") ?>))
 <? else ?>
  AND (bomitem_effective <= CURRENT_DATE)
 <? endif ?>
 
 )
 ORDER BY bomitem_seqnumber, bomitem_effective;
 
 --------------------------------------------------------------------
   
 QUERY: bomhead
 SELECT bomhead_docnum, bomhead_revision,
        formatDate(bomhead_revisiondate) AS f_revisiondate
 FROM bomhead
 WHERE ((bomhead_item_id=<? value("item_id") ?>)
 <? if exists("revision_id") ?>
 AND (bomhead_rev_id=<? value("revision_id") ?>)
 <? else ?>
 AND (bomhead_rev_id=getActiveRevId('BOM',<? value("item_id") ?>))
 <? endif ?>
 );
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: SummarizedSalesByCustomerType
 QUERY: detail
 SELECT custtype_id, custtype_code, warehous_code,
        formatPrice(minprice) AS f_minprice,
        formatPrice(maxprice) AS f_maxprice,
        formatPrice(avgprice) AS f_avgprice,
        formatQty(totalunits) AS f_totalunits,
        totalsales, formatMoney(totalsales) AS f_totalsales 
 FROM ( SELECT custtype_id, custtype_code, warehous_code,
               MIN(currToBase(COALESCE(cohist_curr_id, baseCurrId()), cohist_unitprice, cohist_invcdate)) AS minprice,
               MAX(currToBase(COALESCE(cohist_curr_id, baseCurrId()), cohist_unitprice, cohist_invcdate)) AS maxprice,
               AVG(currToBase(COALESCE(cohist_curr_id, baseCurrId()), cohist_unitprice, cohist_invcdate)) AS avgprice,
               SUM(currToBase(COALESCE(cohist_curr_id, baseCurrId()), cohist_qtyshipped, cohist_invcdate)) AS totalunits,
               SUM(currToBase(COALESCE(cohist_curr_id, baseCurrId()), round(cohist_qtyshipped * cohist_unitprice,2), cohist_invcdate)) AS totalsales 
        FROM cohist, cust, custtype, itemsite, item, warehous 
        WHERE ( (cohist_cust_id=cust_id)
         AND (cust_custtype_id=custtype_id)
         AND (cohist_itemsite_id=itemsite_id)
         AND (itemsite_item_id=item_id)
         AND (itemsite_warehous_id=warehous_id)
         AND (cohist_invcdate BETWEEN <? value("startDate") ?> AND <? value("endDate") ?>)
 <? if exists("warehous_id") ?>
         AND (warehous_id=<? value("warehous_id") ?>)
 <? endif ?>
 <? if exists("custtype_id") ?>
         AND (custtype_id=<? value("custtype_id") ?>)
 <? elseif exists("custtype_pattern") ?>
         AND (custtype_code ~ <? value("custtype_pattern") ?>)
 <? endif ?>
      )
 GROUP BY custtype_id, custtype_code, warehous_code ) AS data
 ORDER BY custtype_code, warehous_code;
 --------------------------------------------------------------------
   
 QUERY: head
 SELECT <? if exists("warehous_id") ?>
          (select warehous_code from warehous where warehous_id=<? value("warehous_id") ?>)
        <? else ?>
          text('All Sites')
        <? endif ?>
        AS warehouse,
        <? if exists("custtype_id") ?>
         (SELECT (custtype_code || '-' || custtype_descrip)
            FROM custtype
           WHERE custtype_id=<? value("custtype_id") ?>)
        <? elseif exists("custtype_pattern") ?>
-         text(<? value("custtype_pattern") ?>
+         text(<? value("custtype_pattern") ?>)
        <? else  ?>
          text('All Customer Types')
        <? endif ?>
        AS custtype,
        formatDate(<? value("startDate") ?>, 'Earliest') AS startdate,
        formatDate(<? value("endDate") ?>, 'Latest') AS enddate;
 --------------------------------------------------------------------
   
\ No newline at end of file
 
 ====================================================================
 REPORT: WOScheduleByParameterList
 QUERY: Detail
-SELECT formatWONumber(wo_id) AS wonumber,
-       wo_status, warehous_code, item_number, item_descrip1, item_descrip2, uom_name,
-       formatQty(wo_qtyord) AS ordered,
-       formatQty(wo_qtyrcv) AS received,
-       formatDate(wo_startdate) AS startdate,
-       formatDate(wo_duedate) AS duedate
-FROM wo, itemsite, warehous, item, uom
-WHERE ( (wo_itemsite_id=itemsite_id)
- AND (itemsite_item_id=item_id)
- AND (item_inv_uom_id=uom_id)
- AND (itemsite_warehous_id=warehous_id)
-
-<? if exists("showOnlyRI") ?>
- AND (wo_status IN ('R', 'I'))
-<? else ?>
- AND (wo_status <> 'C')
-<? endif ?>
-
-<? if exists("showOnlyTopLevel") ?>
- AND (wo_ordtype<>'W')
-<? endif ?>
-
-<? if exists("warehous_id") ?>
- AND (itemsite_warehous_id=<? value("warehous_id") ?>)
-<? endif ?>
-
-<? if exists("item_id") ?>
- AND (itemsite_item_id=<? value("item_id") ?>)
-<? elseif exists("wo_id") ?>
- AND (wo_number IN (SELECT wo_number
-                    FROM wo
-                    WHERE (wo_id=<? value("wo_id") ?>)))
-<? endif ?>
-
-<? if exists("plancode_id") ?>
- AND (itemsite_plancode_id=<? value("plancode_id") ?>)
-<? elseif exists("plancode_pattern") ?>
- AND (itemsite_plancode_id IN (SELECT plancode_id FROM plancode WHERE (plancode_code ~ <? value("plancode_pattern") ?>)))
-<? endif ?>
-
-<? if exists("classcode_id") ?>
- AND (item_classcode_id=<? value("classcode_id") ?>)
-<? elseif exists("classcode_pattern") ?>
- AND (item_classcode_id IN (SELECT classcode_id FROM classcode WHERE (classcode_code ~ <? value("classcode_pattern") ?>)))
-<? endif ?>
-
-<? if exists("itemgrp_id") ?>
- AND (item_id IN (SELECT itemgrpitem_item_id FROM itemgrpitem WHERE (itemgrpitem_itemgrp_id=<? value("itemgrp_id") ?>)))
-<? elseif exists("itemgrp_pattern") ?>
- AND (item_id IN (SELECT itemgrpitem_item_id FROM itemgrpitem, itemgrp WHERE ( (itemgrpitem_itemgrp_id=itemgrp_id) AND (itemgrp_name ~ <? value("itemgrp_pattern") ?>) )))
-<? endif ?>
-
-<? if exists("wrkcnt_id") ?>
- AND (wo_id IN (SELECT wooper_wo_id FROM wooper WHERE (wooper_wrkcnt_id=<? value("wrkcnt_id") ?>)))
-<? elseif exists("wrkcnt_pattern") ?>
- AND (wo_id IN (SELECT wooper_wo_id FROM wooper, wrkcnt WHERE ( (wooper_wrkcnt_id=wrkcnt_id) AND (wrkcnt_code ~ <? value("wrkcnt_pattern") ?>) )))
-<? endif ?>
-
- AND (wo_duedate BETWEEN <? value("startDate") ?> AND <? value("endDate") ?>) )
-ORDER BY
-
-<? if exists("sortByStartDate") ?>
-  wo_startdate,
-<? elseif exists("sortByDueDate") ?>
-  wo_duedate,
-<? elseif exists("sortByItemNumber") ?>
-  item_number,
-<? endif ?>
-
-  wo_number, wo_subnumber;
-    
---------------------------------------------------------------------
   
 QUERY: Head
 SELECT formatDate(<? value("startDate") ?>, 'Earliest') AS f_startdate,
        formatDate(<? value("endDate") ?>, 'Latest') AS f_enddate,
 <? if exists("warehous_id") ?>
        warehous_code
 FROM warehous
 WHERE (warehous_id=<? value("warehous_id") ?>);
 <? else ?>
        TEXT('All Sites') AS warehous_code;
 <? endif ?>
 
 --------------------------------------------------------------------
   
 QUERY: TypeCodeParam
 SELECT
 <? if exists("classcode_id") ?>
   TEXT('Class Code:')
 <? elseif exists("classcode_pattern") ?>
   TEXT('Class Code Pattern:')
 <? elseif exists("plancode_id") ?>
   TEXT('Planner Code:')
 <? elseif exists("plancode_pattern") ?>
   TEXT('Planner Code Pattern:')
 <? elseif exists("itemgrp_id') ?>
   TEXT('Item Group:')
 <? elseif exists("itemgrp_pattern") ?>
   TEXT('Item Group Pattern:')
 <? elseif exists("wrkcnt_id") ?>
   TEXT('Work Center:')
 <? elseif exists("wrkcnt_pattern") ?>
   TEXT('Work Center Pattern:')
 <? else ?>
   TEXT('')
 <? endif ?> AS type,
 <? if exists("classcode_id") ?>
   (SELECT (classcode_code||'-'||classcode_descrip) FROM classcode WHERE (classcode_id=<? value("classcode_id") ?>))
 <? elseif exists("classcode_pattern") ?>
   TEXT(<? value("classcode_pattern") ?>)
 <? elseif exists("plancode_id") ?>
   (SELECT (plancode_code||'-'||plancode_name) FROM plancode WHERE (plancode_id=<? value("plancode_id") ?>))
 <? elseif exists("plancode_pattern") ?>
   TEXT(<? value("plancode_pattern") ?>)
 <? elseif exists("itemgrp_id') ?>
   (SELECT (itemgrp_name||'-'||itemgrp_descrip) FROM itemgrp WHERE (itemgrp_id=<? value("itemgrp_id") ?>))
 <? elseif exists("itemgrp_pattern") ?>
   TEXT(<? value("itemgrp_pattern") ?>)
 <? elseif exists("wrkcnt_id") ?>
   (SELECT (wrkcnt_code||'-'||wrkcnt_descrip) FROM wrkcnt WHERE (wrkcnt_id=<? value("wrkcnt_id") ?>))
 <? elseif exists("wrkcnt_pattern") ?>
   TEXT(<? value("wrkcnt_pattern") ?>)
 <? else ?>
   TEXT('')
 <? endif ?> AS code;
 --------------------------------------------------------------------
   
 QUERY: ItemParameter
 SELECT
 <? if exits("item_id") ?>
   item_number
 FROM item
 WHERE (item_id=<? value("item_id") ?>);
 <? else ?>
   TEXT('All') AS item_number;
 <? endif ?>
 --------------------------------------------------------------------
   
\ No newline at end of file
