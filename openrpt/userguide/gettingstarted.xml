<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter>
  <title id="i554447">Getting Started</title>
  <para>In this chapter, we will be taking a hands-on approach to illustrate
  fundamental report writer functionality. The exercises will focus on the
  embedded xTuple report writer, connected to an xTuple database. However, the
  fundamentals described here also apply to the standalone OpenRPT
  application.</para>
  <section id="i554553">
    <title>Modifying an Existing Report</title>
    <para>The best way to illustrate report writer functionality is to work
    with an existing report definition—rather than create a new one from
    scratch. So, for this first exercise we will be modifying a report
    definition called <emphasis>UsersMasterList</emphasis>. The
    UsersMasterList report definition is a stock xTuple report designed to
    provide information about xTuple users.</para>
    <note>
      <para>The data used in this exercise is pulled from a sample xTuple
      database.</para>
    </note>
    <para>To begin, we must first log in to xTuple. By logging in, we
    automatically connect to an xTuple database. The user information we will
    be working with is stored in the xTuple database.</para>
    <para>We can access the UsersMasterList report by selecting the
    <guimenuitem>Reports</guimenuitem> option from the Master Information
    section of the <guimenu>System</guimenu> module. Scroll down the master
    list of report definitions until you reach the UsersMasterList report.
    Highlight the report, then select the <guibutton>EDIT</guibutton> button.
    The following screen will appear:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_050_RepDef.png"/>
          </imageobject>
          <caption>Users Master List report definition</caption>
        </mediaobject>
      </screenshot></para>
    <para>In the Report Writer Basics chapter, we discussed the importance of
    grades—and how multiple versions of the same report may be stored on a
    database using different grades. By default, xTuple uses the report
    definition having the highest grade.</para>
    <para>To differentiate our working version of the UsersMasterList report
    definition from the standard version, we will save it with a different
    grade. To save a report definition with a different grade, select the
    <guimenuitem>Save to DB</guimenuitem> option from the
    <guimenu>Database</guimenu> menu. The following screen will appear:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_070_DBGrade50.png"/>
          </imageobject>
          <caption>Save Report to Database with a higher grade</caption>
        </mediaobject>
      </screenshot></para>
    <para>We will keep the same name, but change the grade to "50". When we
    select the <guibutton>OK</guibutton> button, the report definition is
    saved to the database.</para>
    <tip>
      <para>If you want to save your changes to the database, be sure to
      select the <guimenuitem>Save to DB</guimenuitem> option. Report
      definitions stored on a local or network drive may also be saved to a
      database in this way.</para>
    </tip>
    <para>We have now made a copy of the report definition—and assigned it a
    high grade ("50"). When xTuple runs the report, it will use our version of
    the report definition because ours has been assigned the highest grade in
    the sample database.</para>
    <section id="i553538">
      <title>Query Sources Overview</title>
      <para>The report writer uses structured query language (SQL) to retrieve
      information from a database. In this section, we will look at how report
      definitions use SQL queries to collect the information which is
      displayed in a report.</para>
      <para>To view the SQL query associated with the UsersMasterList report
      definition, select the <guimenuitem>Query Sources</guimenuitem> option
      from the <guimenu>Document</guimenu> menu. The following screen will
      appear:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_075_QueryList.png"/>
            </imageobject>
            <caption>Query List</caption>
          </mediaobject>
        </screenshot></para>
      <para>The Query master list shows all the queries defined for a report
      definition. In this case, only one query has been defined. To view the
      query, double-click on it—or highlight it and then select
      <guibutton>EDIT</guibutton>. The following screen will appear:</para>
      <para id="i555117"><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_100_SQL.png"/>
            </imageobject>
            <caption>Query Editor showing SQL statement</caption>
          </mediaobject>
        </screenshot></para>
      <para>The basic SQL query structure used by many report definitions
      reads as follows:</para>
      <para><literal>SELECT (column) FROM (table) WHERE (condition) and,
      optionally, ORDER BY (column). </literal></para>
      <para>The query shown above follows this basic format.</para>
      <para>Readers familiar with SQL may have noticed portions of the
      statement surrounded by &lt;?...?&gt; tags. These tags signal the use of
      MetaSQL. MetaSQL is an embedded query language designed to make SQL
      queries dynamic. The MetaSQL language was developed by xTuple for use by
      the report writer.</para>
      <note>
        <para>For more information on MetaSQL, the embedded query language
        designed by xTuple to make SQL queries dynamic, please see the
        Advanced Topics chapter.</para>
      </note>
      <para>We could edit the query using the query editor. But at this point,
      we simply want to familiarize ourselves with the query. We will be
      making cosmetic changes to the report in the next sections.</para>
    </section>
    <section>
      <title>Editing Labels</title>
      <para>Label objects contain static text displayed in a report. Text is
      considered static if it resides in a report definition and is not pulled
      dynamically from a database. A report title is an example of static text
      contained within a label object. In our next exercise, we will show how
      to modify a report title.</para>
      <para>To change the title appearing on the UsersMasterList report
      definition, locate the label object containing the title in the
      <guilabel>Report Header</guilabel> section. The title of the report is
      "Users Master List". Double-clicking on the object will open the Label
      Properties screen. We will change the text of the label and align the
      text on the left margin, as shown in the following screen:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_105_LabelProps.png"/>
            </imageobject>
            <caption>Modified Label Properties</caption>
          </mediaobject>
        </screenshot></para>
      <para>After we have made the changes, we select the
      <guibutton>OK</guibutton> button. The changes are now applied to the
      label object. Finally, we click on the label object and drag it to the
      left-hand margin of the report definition—then save the report
      definition to the database. All these changes appear in the following
      screenshot:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_110_ModfiedLabel.png"/>
            </imageobject>
            <caption>Report definition showing updated label</caption>
          </mediaobject>
        </screenshot></para>
      <tip>
        <para>Using your mouse, you can click on a label object and drag it to
        a new position. Or you can resize a label object, using the handles on
        the perimeter of the object.</para>
      </tip>
    </section>
    <section id="i571645">
      <title>Editing Fields</title>
      <para>Field objects contain dynamic information retrieved from a
      database. The dynamic information is pulled into the field using query
      sources. For this exercise, we will be making a cosmetic change to the
      Username field. The Username field is the field used to print usernames
      on the UsersMasterList report. Later, we will add a new field
      object.</para>
      <para>Our goal in this exercise is to increase the font size used to
      print usernames on the UsersMasterList report. By default, these names
      are printed in 8-pt font. We will be increasing the font size to
      14-pt.</para>
      <para>To begin, we must first locate the field object which contains the
      Username field. We find it partially obscured on the left-hand margin of
      the <guilabel>Detail</guilabel> section. It is the field having the
      name: "usr_username:detail", as shown in the following screen:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_112_UserField1.png"/>
            </imageobject>
            <caption>Standard size font for Username field</caption>
          </mediaobject>
        </screenshot></para>
      <note>
        <para>Don’t be concerned if field objects overlap, causing the names
        which identify them to become partially obscured. This is common when
        field objects are located adjacent to each other.</para>
      </note>
      <para>To edit the properties of the Username field, we double-click on
      the field object. The following Field Properties screen will
      appear.</para>
      <para id="i556383"><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_120_FieldProp1.png"/>
            </imageobject>
            <caption>Field Properties</caption>
          </mediaobject>
        </screenshot></para>
      <para>As you can see, the query source being used to populate the field
      is the <emphasis>detail</emphasis> query source. This is the same query
      source we looked at previously. The detail query uses SQL to retrieve
      user information from the database the report writer is connected to.
      The column <literal>usr_username</literal> is one of the columns
      mentioned in the detail query’s <literal>SELECT</literal> statement.
      Only this column will be used when retrieving data into the field. All
      other columns referenced in the <literal>SELECT</literal> statement will
      be ignored.</para>
      <note>
        <para>This explains how field names are determined: they begin with
        the name of a column referenced in a query source, and are followed by
        the name of the very same query source. And so, in our current
        example, we get "usr_username:detail."</para>
      </note>
      <para>For now, we are concerned only with changing the font size used to
      print usernames on the UsersMasterList report. We select the
      <guibutton>FONT</guibutton> button at the bottom of the screen and
      specify a 14-pt font size. After we select the <guibutton>OK</guibutton>
      button, we see the change reflected in the report definition, as shown
      below:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_125_UserField2.png"/>
            </imageobject>
            <caption>Enlarged font size for Username field</caption>
          </mediaobject>
        </screenshot></para>
      <para>For now, we won’t worry about the length of the field. We will,
      however, adjust the height of the field object to accommodate the larger
      font. Once we have saved our changes to the database, we can run the
      report and see how our updates have affected the printed results.</para>
      <para>To run the report from within xTuple, open the
      <guimenuitem>Maintain Users</guimenuitem> option from the
      <guimenu>System</guimenu> module menu. After selecting the
      <guibutton>PRINT</guibutton> button, the report will print out as
      follows:</para>
      <para id="i556741"><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_130_RunReport.png"/>
            </imageobject>
            <caption>Modified report output</caption>
          </mediaobject>
        </screenshot></para>
      <para>As you can see, the usernames have in fact been printed in 14-pt
      font, as expected. The information contained in other fields—active
      status, proper name, initials, etc.—still appears in the default 8-pt
      font. Notice that the printed title of the report has also been
      modified, per our report definition changes.</para>
    </section>
    <section>
      <title>Adding Barcodes</title>
      <para>Now that we have a made a few cosmetic changes to a report
      definition, we are now ready to make a more significant change. In this
      next exercise, we will add a barcode object to print usernames in
      barcode format.</para>
      <para>The mechanics of adding a barcode object are the same as adding a
      human-readable field object. When we are done, we will have a report
      that looks like the following:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_150_ReportWithBarcode.png"/>
            </imageobject>
            <caption>Preview of report with barcodes added</caption>
          </mediaobject>
        </screenshot></para>
      <para>We will be adding the barcode object just below the field object
      containing the human-readable username. To do so, we first need to
      expand the lower boundary of the UsersMasterList detail section.</para>
      <tip>
        <para>To expand the height of a section, simply hold your mouse over
        the lower boundary of the section. When the double arrows of the
        resize cursor appear, use your mouse to expand the section.</para>
      </tip>
      <para>Once the <guilabel>Detail</guilabel> section has been expanded, we
      select the barcode option from the toolbar and then click in the section
      just below the <guilabel>Username</guilabel> field. We have now inserted
      the barcode object into the report definition, as shown in the following
      screen.</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_135_AddBarcode.png"/>
            </imageobject>
            <caption>Barcode object inserted into report definition</caption>
          </mediaobject>
        </screenshot></para>
      <para>We must now specify the properties of the barcode object. To do
      so, we double-click on the barcode object. The following screen will
      appear:</para>
      <para id="i558356"><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_140_BarcodeProp.png"/>
            </imageobject>
            <caption>Barcode Properties</caption>
          </mediaobject>
        </screenshot></para>
      <para>Like field objects, barcode objects contain dynamic information
      retrieved from a database. As you can see, the barcode properties screen
      requires a query source and column name. The dynamic information we need
      for this exercise is the same as we needed previously—namely, usernames
      retrieved from the <literal>usr</literal> table. The only difference
      here is that we will be representing usernames in barcode format. We
      enter the following parameters:</para>
      <variablelist>
        <varlistentry>
          <term>Format</term>
          <listitem>
            <para>3of9 (The report writer supports the following barcode
            formats: 3of9, 3of9+, 128, ean13, ean8, upc-a, and upc-e.)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Query Source</term>
          <listitem>
            <para>detail</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Column</term>
          <listitem>
            <para>usr_username</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Maximum Length of Value</term>
          <listitem>
            <para>10 (Specifies the maximum number of characters the barcode
            is expected to contain.)</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>After we select the <guibutton>OK</guibutton> button, we see the
      barcode object has been updated in the report definition, as shown
      below:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_145_BarcodeDetail.png"/>
            </imageobject>
            <caption>Detail section with barcode added</caption>
          </mediaobject>
        </screenshot></para>
      <para>As you can see, the barcode object is now identified with the name
      <literal>usr_username:detail barcode</literal>. This name refers to the
      column and query source which will be used to generate username data in
      barcode format. Before we save our changes to the database, we click on
      the right side of the barcode object and drag it to make it
      longer.</para>
      <para>We have now successfully created a barcode object that will print
      in "3of9" format—one of several widely-used barcode formats supported by
      the report writer. Now let’s print the report and see the
      results.</para>
      <para>To print the Users master list, select the <guimenuitem>Maintain
      Users</guimenuitem> option from the <guimenu>System</guimenu> module
      menu. When the master list of users appears, select the
      <guibutton>PRINT</guibutton> button. The following screen shows a
      portion of the printed report:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_150_ReportWithBarcode.png"/>
            </imageobject>
            <caption>Report with bar-coded username</caption>
          </mediaobject>
        </screenshot></para>
      <para>As you can see, the final result matches the result we expected to
      see when we began this section. The usernames on the Users master list
      are now both human-readable and machine-readable.</para>
    </section>
  </section>
  <section>
    <title>Column Headings</title>
    <para>The "UsersMasterList" report definition utilizes three different
    header types: <guilabel>Page Header (First)</guilabel>, <guilabel>Page
    Header (Any)</guilabel>, and <guilabel>Report Header</guilabel>. The
    following screenshot shows how each of these headers fits within the
    report definition:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_160_Headers.png"/>
          </imageobject>
          <caption>Technique for managing report titles and column
          headings</caption>
        </mediaobject>
      </screenshot></para>
    <para>You may be wondering if we need both a <guilabel>Page Header
    (First)</guilabel> and a <guilabel>Page Header
    (Any)</guilabel>—particularly since the <guilabel>Page Header
    (First)</guilabel> is empty. But this technique actually serves a useful
    purpose, as explained below:</para>
    <variablelist>
      <varlistentry>
        <term>Page Header (First)</term>
        <listitem>
          <para>This is blank because the <guilabel>Report Header</guilabel>,
          which always displays on the first page only, contains column
          headings. The <guilabel>Page Header (Any)</guilabel> also contains
          column headings. Following the report writer’s rules of precedence,
          a <guilabel>Page Header (First)</guilabel>, if defined, prints in
          place of a <guilabel>Page Header (Any)</guilabel>. This logic
          ensures the <guilabel>Page Header (Any)</guilabel> does not print on
          the first page—and so we avoid having two sets of column headings on
          the first page.</para>
          <note>
            <para>For more information on precedence and other header details,
            see the <guilabel>Report Headers</guilabel> and <guilabel>Page
            Headers</guilabel> sections in the Report Writer Basics
            chapter.</para>
          </note>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Page Header (Any)</term>
        <listitem>
          <para>This header contains the column headings that appear on the
          second page and all subsequent pages. The <guilabel>Page Header
          (Any)</guilabel> will not print on the first page because a
          <guilabel>Page Header (First)</guilabel> is defined.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Report Header</term>
        <listitem>
          <para>The <guilabel>Report Header</guilabel> displays on the first
          page only. In this case, the report header contains both a report
          title and report columns.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <section id="i549548">
      <title>Modifying Column Headings</title>
      <para>For this exercise, we will change the wording of the locale column
      heading. As you can see in the following screenshot, this column heading
      appears in both the <guilabel>Page Header (Any)</guilabel> and
      <guilabel>Report Header</guilabel> sections:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabel.png"/>
            </imageobject>
            <caption>Locale column heading selected</caption>
          </mediaobject>
        </screenshot></para>
      <para>A locale is frequently used to define a user's language. And so,
      for the purpose of this exercise, let’s change the column heading from
      <guilabel>Locale</guilabel> to <guilabel>Language</guilabel>. To edit
      the column heading, double-click on the label object which contains the
      text. The following screen will appear:</para>
      <para id="i563365"><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabelProps.png"/>
            </imageobject>
            <caption>Label Properties for column heading</caption>
          </mediaobject>
        </screenshot></para>
      <para>As you can see, we have entered the new wording in the
      <guilabel>Text</guilabel> field. We make the same change to the locale
      column heading found in the <guilabel>Report Header</guilabel>. And
      after saving the changes to the database, we see them both applied to
      the report definition, as shown below:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabelProps.png"/>
            </imageobject>
            <caption>Label changed for locale column heading</caption>
          </mediaobject>
        </screenshot></para>
      <para>The techniques used to edit label objects are the same regardless
      of where a label object is located in the report definition.</para>
    </section>
    <section id="i548203">
      <title>Adding Column Headings</title>
      <para>Over the course of the next few sections, we will perform the
      steps necessary to add email addresses to our Users master list. The
      first step is to add a column heading. The new <guilabel>Email Address
      </guilabel>column heading will ensure the data we retrieve from the
      database is labeled appropriately.</para>
      <para>To add the new column heading, we select the
      <guibutton>Label</guibutton> icon from the toolbar and then click in the
      <guilabel>Page Header (Any)</guilabel> section. We place the label
      object to the right of the <guilabel>Language</guilabel> column heading,
      as shown in the following screen:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabel.png"/>
            </imageobject>
            <caption>Adding new column headings</caption>
          </mediaobject>
        </screenshot></para>
      <para>Now that we have placed the label object, we must define its
      properties. Double-clicking on the label object opens the Label
      Properties screen:</para>
      <para id="i564291"><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_170_NewLabelProps.png"/>
            </imageobject>
            <caption>Column heading properties</caption>
          </mediaobject>
        </screenshot></para>
      <para>As you can see, we have entered "Email Address" in the
      <guilabel>Text</guilabel> field. This is the text which will appear as a
      column heading. We repeat the same steps to add the same new column
      heading to the <guilabel>Report Header</guilabel> section. And after
      moving the label objects into place using our mouse and saving the
      changes to the database, the column headings are located where we want
      them, as shown in the following screen:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_175_EmailAddress.png"/>
            </imageobject>
            <caption>Email address labels added to report definition</caption>
          </mediaobject>
        </screenshot></para>
      <para>Adding column headings for email addresses is only the first step
      in the multi-step process of inserting email addresses into the report.
      In the following sections, we will examine how to retrieve the needed
      information from the database.</para>
    </section>
  </section>
  <section>
    <title>Modifying Query Sources</title>
    <para>We’ve successfully added a column heading called "Email Address" to
    our report definition. Now we need to work on retrieving user email
    addresses from the database. To begin, let’s look at the query sources
    defined for this report definition. To view the available query sources,
    select the <guimenuitem>Query Sources</guimenuitem> option from the
    <guimenu>Database</guimenu> menu. The following screen will appear:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_075_QueryList.png"/>
          </imageobject>
          <caption>Query List</caption>
        </mediaobject>
      </screenshot></para>
    <para>As we have seen before, the <emphasis>detail</emphasis> query source
    is the only query source defined for the UsersMasterList report
    definition. To open the query source for editing, simply double-click on
    it, or highlight it and select the <guibutton>EDIT</guibutton> button. The
    following screen will appear:</para>
    <para id="i564487"><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_100_SQL.png"/>
          </imageobject>
          <caption>Query source for UsersMasterList report</caption>
        </mediaobject>
      </screenshot></para>
    <para>Since we are familiar with our sample database, we know the
    <literal>usr</literal> table has a column called
    <literal>usr_email</literal>, which stores user email addresses. However,
    if we look closely at the <literal>SELECT</literal> statement, we do not
    see references to the <literal>usr_email</literal> column. Without a
    reference to the <literal>usr_email</literal> column, we will not be able
    to retrieve user email address information from the database. We need to
    add that reference to the <literal>SELECT</literal> statement.</para>
    <section>
      <title>Editing SQL Statements</title>
      <para>As we saw in the previous section, the <literal>SELECT</literal>
      statement in our query source does not refer to the
      <literal>usr_email</literal> column. Without that column reference, we
      will not be able to retrieve user email address information from the
      database. In this section, we will edit the <literal>SELECT</literal>
      statement so the <literal>usr_email</literal> column is referenced. The
      SQL found in the Query display of a query source is straight text. It
      can be edited in the same was as any text can be edited. We simply click
      in the <literal>SELECT</literal> statement after the reference to the
      <literal>usr_initials</literal> column. Then, after hitting
      <guibutton>ENTER</guibutton> to create an extra line, we type in the
      <literal>usr_email</literal> reference, as shown below:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_180_EmailSQL.png"/>
            </imageobject>
            <caption>Email column added to SQL SELECT statement</caption>
          </mediaobject>
        </screenshot></para>
      <para>We are careful to add a comma "," at the end of the
      <literal>usr_email</literal> reference, to indicate the column is one in
      a series of columns data may be retrieved from. To save the edited SQL,
      select the <guibutton>OK</guibutton> button. Finally, we save all report
      definition changes to the database.</para>
      <para>In our next step, we will add a new field object to the
      <guilabel>Detail</guilabel> section of the report definition. The field
      object will handle the display of user email addresses retrieved from
      the database.</para>
    </section>
    <section>
      <title>Retrieving Data</title>
      <para>Field objects are used to display dynamic data retrieved from a
      database. Typically, they are placed in the <guilabel>Detail</guilabel>
      section of a report definition. In this section, we will add a field
      object to handle our user email addresses.</para>
      <para>To add a field object to the report definition, we select the
      <guibutton>Field</guibutton> icon from the toolbar and then click in the
      <guilabel>Detail</guilabel> section. We place the field object to the
      far-right of the section, lined up beneath the <guilabel>Email
      Address</guilabel> column heading, as shown in the following
      screen:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_182_EmailField.png"/>
            </imageobject>
            <caption>New field added to report definition</caption>
          </mediaobject>
        </screenshot></para>
      <para>Now that we have placed the field object, we must define its
      properties. Double-clicking on the field object opens the Field
      Properties screen:</para>
      <para id="i565574"><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_184_FieldProps.png"/>
            </imageobject>
            <caption>Properties for email address field</caption>
          </mediaobject>
        </screenshot></para>
      <para>As you can see, we have filled in the following
      information:</para>
      <variablelist>
        <varlistentry>
          <term>Query Source</term>
          <listitem>
            <para>We selected the detail query from the list of available
            query sources. This is the query whose <literal>SELECT</literal>
            statement includes the newly-added reference to the
            <literal>usr_email</literal> column.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Column</term>
          <listitem>
            <para>Here we enter the name of the <literal>usr_email</literal>
            column—since this is the column whose data we need for the field
            object. A column must be referenced in the
            <literal>SELECT</literal> statement of the associated query source
            to successfully retrieve data from the database.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Preview</term>
          <listitem>
            <para>The preview shows us both the name assigned to the field
            object <literal>usr_email:detail</literal> and also the font
            choice. To make the font consistent with the other field objects
            in the report definition, we select the
            <guibutton>FONT</guibutton> button and specify 8-pt bold
            Arial.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>After we select the <guibutton>OK</guibutton> button, we see the
      field object has been updated in the report definition, as shown
      below:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_185_FieldUpdated.png"/>
            </imageobject>
            <caption>Field Object for Displaying User Email
            Addresses</caption>
          </mediaobject>
        </screenshot></para>
      <para>We have now added the field object to the report definition—and
      aligned it correctly beneath the email address column headings. Once we
      save the report definition changes to the database, we will be ready to
      run the report and see the results.</para>
      <para>To run the Users master list report from xTuple, select the
      <guimenuitem>Maintain Users</guimenuitem> option from the
      <guimenu>System</guimenu> module menu. After selecting the
      <guibutton>PRINT</guibutton> button, the following report is
      generated:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_186_EmailPrinted.png"/>
            </imageobject>
            <caption>Email address appearing on printed report</caption>
          </mediaobject>
        </screenshot></para>
      <para>As you can see, the user email addresses have been successfully
      added to the report.</para>
    </section>
  </section>
  <section>
    <title>Total Fields</title>
    <para>We have seen how field objects may be used to retrieve text (i.e.,
    user email addresses) from a database. In this section we will show how to
    create running totals using field objects.</para>
    <para>Our goal for this exercise is to provide a running total of all
    active users. There are currently three active users in the database. We
    will add a fourth user and make that user inactive, as shown in the
    following screen:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_190_UserList.png"/>
          </imageobject>
          <caption>Master list of xTuple users</caption>
        </mediaobject>
      </screenshot></para>
    <para>If we are successful, the field object should ignore the inactive
    user and include only the three active users in the running total.</para>
    <para>To begin, we will create a report footer section in the report
    definition. As you may recall, report footers print only on the last page
    of a report—which is exactly what we want. We want the running total to
    print at the end of the report.</para>
    <note>
      <para>For more information on report footers, see the Report Footers
      section in the Report Writer Basics chapter.</para>
    </note>
    <para>To create a report footer section, we select the
    <guimenuitem>Section Editor</guimenuitem> option from the
    <guimenu>Document</guimenu> menu. The following screen will appear:</para>
    <para id="i566106"><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_191_RepFooter.png"/>
          </imageobject>
          <caption>Add report footer using Section Editor</caption>
        </mediaobject>
      </screenshot></para>
    <para>As you can see, we have selected the <guilabel>Report
    Footer</guilabel> option. Selecting this option causes a report footer to
    be added to the report definition, as shown in the following
    screen:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_192_FooterAdded.png"/>
          </imageobject>
          <caption>Report footer section added to report definition</caption>
        </mediaobject>
      </screenshot></para>
    <para>Now that we have added the <guilabel>Report Footer</guilabel>
    section, our next step is to add a field object to the section. The field
    object will display the running total of all active users.</para>
    <para>To add a field object to the report definition, we select the
    <guibutton>Field</guibutton> icon from the toolbar and then click in the
    <guilabel>Report Footer</guilabel> section. We place the field object in
    the section, as shown in the following screen:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_193_TotalField.png"/>
          </imageobject>
          <caption>Field object added to Report Footer section</caption>
        </mediaobject>
      </screenshot></para>
    <para>Now that we have placed the field object, we must define its
    properties. Double-clicking on the field object opens the Field Properties
    screen:</para>
    <para id="i568493"><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_194_TotalProps.png"/>
          </imageobject>
          <caption>Properties for running total field</caption>
        </mediaobject>
      </screenshot></para>
    <para>As you can see, we have filled in the following properties for the
    running total field object:</para>
    <variablelist>
      <varlistentry>
        <term>Query Source</term>
        <listitem>
          <para>We selected the detail query from the list of available query
          sources. This is the query whose <literal>SELECT</literal> statement
          includes the reference to the <literal>usr_active</literal>
          column.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Column</term>
        <listitem>
          <para>Here we enter the name of the <literal>usr_active</literal>
          column—since this is the column whose data we need for the field
          object. A column must be referenced in the <literal>SELECT</literal>
          statement of the associated query source to successfully retrieve
          data from the database.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Display as Running Total</term>
        <listitem>
          <para>By selecting this option, we indicate we want the records on
          active users to be displayed as a running total. When the running
          total is calculated, active users will be assigned a value of "1",
          while inactive users will be assigned a value of "0".</para>
          <note>
            <para>When running totals are calculated for columns designated as
            Boolean, the <emphasis>true</emphasis> values are assigned a value
            of "1", while <emphasis>false</emphasis> values are assigned a
            value of "0". In this example, active users would be assigned a
            value of "1", while inactive users would be assigned a value of
            "0".</para>
          </note>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Built-in Locale Format</term>
        <listitem>
          <para>We specify we want the running total to be displayed as a
          quantity.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Preview</term>
        <listitem>
          <para>The preview shows us both the name assigned to the field
          object <literal>usr_active:detail</literal> and also the font
          choice. To make the font consistent with the other field objects in
          the report definition, we select the <guibutton>FONT</guibutton>
          button and specify 8-pt bold Arial.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>After we select the <guibutton>OK</guibutton> button, we see the
    field object has been updated in the report definition, as shown
    below:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_195_AddTotalField.png"/>
          </imageobject>
          <caption>Running total field added</caption>
        </mediaobject>
      </screenshot></para>
    <para>We have added the field object which will retrieve data from the
    <literal>usr_active</literal> column and display the information as a
    running total. Next, we need to insert a label object to appropriately
    identify the field.</para>
    <para>To add the new label, we select the <guibutton>Label</guibutton>
    icon from the toolbar and then click in the <guilabel>Report
    Footer</guilabel> section. We place the label object to the left of the
    <literal>usr_active:detail</literal> field, as shown in the following
    screen:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_196_TotalLabel.png"/>
          </imageobject>
          <caption>Label object added next to running total field</caption>
        </mediaobject>
      </screenshot></para>
    <para>Now that we have placed the label object, we must define its
    properties. Double-clicking on the label object opens the Label Properties
    screen:</para>
    <para id="i568600"><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_197_TotalLabProps.png"/>
          </imageobject>
          <caption>Running total label properties</caption>
        </mediaobject>
      </screenshot></para>
    <para>As you can see, we have entered "Total Active Users:" in the
    <guilabel>Text</guilabel> field. This text identifies the running total,
    as shown in the following screen:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_198_TotalLabel.png"/>
          </imageobject>
          <caption>Label object identifying running total</caption>
        </mediaobject>
      </screenshot></para>
    <para>We have now added the running total to the report definition—and
    labeled it appropriately. Once we save the report definition changes to
    the database, we will be ready to run the report and see the
    results.</para>
    <para>To run the Users master list report from xTuple, select the
    <guimenuitem>Maintain Users</guimenuitem> option from the
    <guimenu>System</guimenu> module menu. After selecting the
    <guibutton>PRINT</guibutton> button, the following report is
    generated:</para>
    <para id="i569519"><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_199_RunningTotal.png"/>
          </imageobject>
          <caption>Running total appearing on printed report</caption>
        </mediaobject>
      </screenshot></para>
    <para>If we scrutinize the example closely, we see the appearance of the
    report would benefit if we added a horizontal line separating the
    usernames from the running total. In the next section, we will add a
    separator line.</para>
    <section>
      <title>Adding Horizontal Lines</title>
      <para>Lines make reports easier to view. In this section, we will add a
      horizontal line to separate the usernames from the running total at the
      bottom of the report.</para>
      <para>To add a line, we select the <guibutton>Line</guibutton> icon from
      the toolbar and then click in the <guilabel>Report Footer</guilabel>
      section.</para>
      <tip>
        <para>If you hold down the <guibutton>SHIFT</guibutton> key when you
        are dragging a line object, this will keep the line perfectly
        straight. Also, to reposition a line, simply click in its mid-point
        and drag the object to a new location.</para>
      </tip>
      <para>We place the line just above the running total field—and then drag
      the line using our mouse from the left margin to the right margin.
      Finally, we double-click on the line object to adjust its properties.
      The following screen appears:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_205_LineWidth.png"/>
            </imageobject>
            <caption>Setting line properties</caption>
          </mediaobject>
        </screenshot></para>
      <para>In the <guilabel>Width</guilabel> field, we set the width of the
      line to "2". Line widths are measured in pixels. After saving our
      changes to the database, we print the Users master list report. The
      following screenshot shows our result:</para>
      <para><screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/C02_210_LineAdded.png"/>
            </imageobject>
            <caption>Line added above running total field</caption>
          </mediaobject>
        </screenshot></para>
      <para>We are almost done modifying the UsersMasterList report definition
      for this chapter. However, we still want to display a total of all
      users—as a complement to the running total of active users. We will add
      this additional information in the next section.</para>
    </section>
  </section>
  <section>
    <title>Counter Fields</title>
    <para>The last change we will make to the UsersMasterList report
    definition in this chapter is to add a total count of all displayed users.
    This total will complement the running total of active users, which we
    have already added, since the UsersMasterList report may display both
    active and inactive users.</para>
    <para>To provide this total information, we will add a "COUNTER" variable
    to the detail query source. The "COUNTER" variable will increment by 1 for
    every row returned by a query. For example, if a column contains 10 rows
    of data, the "COUNTER" will total "10" after the query has been
    run.</para>
    <para>To add the "COUNTER", we open the detail query source by
    double-clicking on it from the list of available query sources. Next, we
    add the "COUNTER" to the query’s <literal>SELECT</literal> statement, as
    shown in the following screen:</para>
    <para id="i570032"><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_215_CounterSQL.png"/>
          </imageobject>
          <caption>Counter added to query source</caption>
        </mediaobject>
      </screenshot></para>
    <para>As you can see, the "COUNTER" syntax is highlighted at the end of
    the <literal>SELECT</literal> statement. The "1 AS COUNTER" syntax
    indicates two things: 1) For every row of data retrieved from the
    database, that row will be assigned a value of "1", and 2) the result set
    of retrieved rows will be stored in memory in a temporary column we have
    called <literal>COUNTER</literal>. Notice we have been careful to add a
    comma after the reference to the <literal>locale_code</literal> column.
    The comma separates the "COUNTER" from the other items in the
    <literal>SELECT</literal> statement series. We do not insert a comma after
    the "COUNTER" line.</para>
    <para>Now that we have inserted the "COUNTER" into the query source, we
    are ready to add a field object to display the results.</para>
    <para>To add a field object to the report definition, we select the
    <guibutton>Field</guibutton> icon from the toolbar and then click in the
    <guilabel>Report Footer</guilabel> section. We place the field object in
    the section, as shown in the following screen:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_222_CounterField.png"/>
          </imageobject>
          <caption>Counter field added to report footer section</caption>
        </mediaobject>
      </screenshot></para>
    <para>Now that we have placed the field object, we must define its
    properties. Double-clicking on the field object opens the Field Properties
    screen:</para>
    <para id="i570773"><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_217_CounterProps.png"/>
          </imageobject>
          <caption>Properties for counter field</caption>
        </mediaobject>
      </screenshot></para>
    <para>As you can see, we have filled in the following properties for the
    "COUNTER" field object:</para>
    <variablelist>
      <varlistentry>
        <term>Query Source</term>
        <listitem>
          <para>We selected the detail query from the list of available query
          sources. This is the query whose <literal>SELECT</literal> statement
          includes the reference to the temporary <literal>COUNTER</literal>
          column.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Column</term>
        <listitem>
          <para>Here we enter the name of the temporary
          <literal>COUNTER</literal> column—since this is the column whose
          data we need for the field object. A column must be referenced in
          the <literal>SELECT</literal> statement of the associated query
          source to successfully retrieve data from the database.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Display as Running Total</term>
        <listitem>
          <para>By selecting this option, we indicate we want all the records
          written to the <literal>COUNTER</literal> column to be displayed as
          a running total. When the running total is calculated, each record
          (i.e., displayed user) will be assigned a value of "1".</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Built-in Locale Format</term>
        <listitem>
          <para>We specify we want the running total to be displayed as a
          quantity.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Preview</term>
        <listitem>
          <para>The preview shows us both the name assigned to the field
          object <literal>COUNTER:detail</literal> and also the font choice.
          To make the font consistent with the other field objects in the
          report definition, we select the <guibutton>FONT</guibutton> button
          and specify 8-pt bold Arial.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>After we select the <guibutton>OK</guibutton> button, we see the
    field object has been updated in the report definition, as shown
    below:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_223_CounterAdded.png"/>
          </imageobject>
          <caption>Counter field added to Report Footer section</caption>
        </mediaobject>
      </screenshot></para>
    <para>We have added the field object which will retrieve data from the
    <literal>COUNTER</literal> column and display the information as a running
    total. Next, we need to insert a label object to appropriately identify
    the field.</para>
    <para>To add the new label, we select the <guibutton>Label</guibutton>
    icon from the toolbar and then click in the Report Footer section. We
    place the label object to the left of the "COUNTER:detail" field, as shown
    in the following screen:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_224_CounterLabel.png"/>
          </imageobject>
          <caption>Label object added next to Counter field</caption>
        </mediaobject>
      </screenshot></para>
    <para>Now that we have placed the label object, we must define its
    properties. Double-clicking on the label object opens the Label Properties
    screen:</para>
    <para id="i571069"><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_225_CountLabProps.png"/>
          </imageobject>
          <caption>Counter Label Properties</caption>
        </mediaobject>
      </screenshot></para>
    <para>As you can see, we have entered "Total Displayed Users:" in the
    <guilabel>Text</guilabel> field. This text identifies the running total,
    as shown in the following screen:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_226_CountLabAdded.png"/>
          </imageobject>
          <caption>Label object identifying counter</caption>
        </mediaobject>
      </screenshot></para>
    <para>We have now added a "COUNTER" to the report definition—and labeled
    it appropriately. Once we save the report definition changes to the
    database, we will be ready to run the report and see the results.</para>
    <para>To run the Users master list report from xTuple, select the
    <guimenuitem>Maintain Users</guimenuitem> option from the
    <guimenu>System</guimenu> module menu. After selecting the
    <guibutton>PRINT</guibutton> button, the following report is
    generated:</para>
    <para><screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/C02_227_CounterPrint.png"/>
          </imageobject>
          <caption>Counter appearing on printed report</caption>
        </mediaobject>
      </screenshot></para>
    <para>We have now reached the end of the exercises contained in the this
    chapter. Over the course of this chapter we have taken a hands-on approach
    to learning fundamental report writer functionality. You should now
    understand how the report writer retrieves information from a database and
    displays that information in printed form. More advanced functionality
    will be explored in subsequent chapters.</para>
  </section>
</chapter>
