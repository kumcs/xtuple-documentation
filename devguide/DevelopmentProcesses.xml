<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../specs/docbook-omfg.css"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<article>
  <title>Developers' Guide to</title>
  <subtitle>Making Software Changes</subtitle>
  <articleinfo>
    <corpauthor>OpenMFG, LLC</corpauthor>
    <pubdate>$Date: 2008/03/12 15:39:26 $</pubdate>
    <edition>cvs $Revision: 1.9 $</edition>
    <copyright>
      <year>2007</year>
      <holder>OpenMFG, LLC</holder>
    </copyright>
  </articleinfo>
  <para>This document describes the core development guidelines for
  contributing to the <orgname>xTuple</orgname> development effort. It assumes
  very little about software development experience but is not a tutorial for
  software development, software development tools, or programming languages.
  Most of the content will be familiar to experienced software
  developers.</para>
  <para>The current draft is aimed at employees of <orgname>xTuple</orgname>
  working internally. Future versions will address the processes for customer,
  reseller, and third-party contributions.</para>
  <para>The reader should read and follow the steps outlined in the
  <citetitle><ulink url="DevelopmentEnvSetup.xml">OpenMFG Developers' Guide to
  Configuring a Development Environment</ulink></citetitle> before continuing
  with the steps below. The configuration document describes what tools you
  will need and how to obtain and install them.</para>
  <important role="openmfg">
    <para>To contribute to the <application>OpenMFG</application> development
    effort, you must contact <ulink
    url="http://www.trolltech.com/"><orgname>Trolltech</orgname></ulink> and
    get a commercial license for <application>Qt</application>.</para>
  </important>
  <para>Conventions:<variablelist>
      <varlistentry>
        <term><literal>literal</literal></term>
        <listitem>
          <para>Type this exactly as you see it</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal><replaceable>user-defined</replaceable></literal></term>
        <listitem>
          <para>The value that you type is dependent on your
          environment</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>.../name</filename></term>
        <listitem>
          <para>The path to reach a certain file or directory. This may be a
          full- or relative-path. If the path starts with a slash
          (<literal>/</literal>) then you must specify the full path (this is
          rare).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal><prompt>prompt$ </prompt>stuff</literal></term>
        <listitem>
          <para>$ is the prompt and stuff is what you type after it</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>\</term>
        <listitem>
          <para>Programming and command line examples may be too long to fit
          across a printed page. In these cases a line of text in this
          document might end with a backslash character ('\'). This indicates
          that the next line of text in this document is part of the line
          ending with the backslash and should be typed without using the
          <keysym>Enter</keysym> or <keysym>Return</keysym> key and without
          the backslash.</para>
        </listitem>
      </varlistentry>
    </variablelist></para>
  <section id="concepts">
    <title>Introductory Concepts</title>
    <para>master copy of something vs. the copy that's actually used</para>
    <para>the appropriate place(s) to make a change visible</para>
    <para>what is part of the product and what is not</para>
    <para>bug tracking</para>
    <para>what are SVN and CVS?</para>
    <para>SVN repository holds xtuple, xtupledocs, xtupleserver, updater,
    csvimport on SourceForge</para>
    <para>CVS repository holds OpenRPT on SourceForge</para>
    <para>Read-access to the SourceForge repositories is available to everyone
    while write/commit access is restricted. If you want commit access, please
    contact xTuple.</para>
    <para role="openmfg">There is a private repository for OpenMFG client and
    server files</para>
    <para>how we use CVS and SVN: if you check in, everyone sees it when they
    update</para>
    <para>naming conventions</para>
    <para>backing out changes if you've really screwed up</para>
    <para>if it's broke, fix it; if it ain't broke, don't break it</para>
    <para>use the language to simplify</para>
    <para>images in the application</para>
  </section>
  <section>
    <title>Changes that are not to be part of the xTuple ERP Product</title>
    <para>one-off changes vs. experimental work vs. not generally
    applicable</para>
    <para>don't do it - maintenance - but if you must, create your own CVS or
    SVN repository for your own work and keep each feature or bug-fix isolated
    to individual checkins. There are strategies for updating your own
    repository from a master and keeping your changes.</para>
  </section>
  <section id="bugs">
    <title>Fixing Bugs</title>
    <para>reproduce</para>
    <para>confirm</para>
    <para>assign</para>
    <para>resolve - checkin as few times as possible (combine contents of
    multiple directories) and the comment should include "fixes bug #12345" or
    "fixes issue #12345" if it really fixes the problem, or leave off the word
    "fixes" if it's only part of the solution, such as an intermediate
    checkin. This wording automatically updates the Mantis issue, adding a
    note in all of these cases and actually marking the issue as resolved if
    the comment includes the word "fixes". Note that the # symbol is
    significant, as is the fact that there should be no space between the #
    and the issue number.</para>
    <para>close</para>
  </section>
  <section>
    <title id="features">Adding Features</title>
    <para>understand</para>
    <para>add issue</para>
    <para>spec</para>
    <para>implement</para>
    <para>resolve</para>
    <para>accept</para>
    <para>close</para>
  </section>
  <section>
    <title>Regardless of language or part of the application</title>
    <para>Some Guidelines:</para>
    <itemizedlist>
      <listitem>
        <para>If the code you're changing is broken (in some way other than
        what you're trying to change or fix), fix it anyway. There are only
        two exceptions:</para>
        <orderedlist>
          <listitem>
            <para>You know for a fact that someone else is working on fixing
            this problem.</para>
          </listitem>
          <listitem>
            <para>The product is approaching final release, as in you are
            making changes to a late beta release, a release candidate, or a
            final build.</para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>If you are making additions to existing code, integrate your
        changes with the existing code. For example, if an existing stored
        procedure manipulates work orders with a status of Open and Exploded
        and you are trying to make it do the same thing with Imploded work
        orders, don't do this:<programlisting>IF (_statusVar IN (''O'', ''E'') THEN -- existing
...                                   -- existing
ELSEIF (_statusVar = ''I'') THEN
same ... -- duplicated code: Bad Programmer!
</programlisting></para>
        <para>Do this instead:<programlisting>IF (_statusVar IN (''O'', ''E'', ''I'') THEN
...</programlisting></para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="setup.win32.vcexpress">
    <title id="reports">Changing Reports</title>
    <para>Master copies of all reports live in the
    <filename>share/reports</filename> subdirectory of the
    <filename>xtuple</filename> repository.</para>
    <orderedlist>
      <listitem>
        <para><literal>svn update</literal> your <literal>xtuple</literal>
        repository checkout</para>
      </listitem>
      <listitem>
        <para>Load
        <filename><replaceable>reportname</replaceable>.xml</filename> into
        the database</para>
      </listitem>
      <listitem>
        <para>Make and test your changes</para>
      </listitem>
      <listitem>
        <para>Save your changes to the database as level 0 of the
        report</para>
      </listitem>
      <listitem>
        <para>Save your changes to
        <filename>.../OpenMFG/ReportDefinitions/OpenMFG/<replaceable>reportname</replaceable>.xml</filename></para>
      </listitem>
      <listitem>
        <para>If you had to use a level other than 0 for testing, remove the
        non-level 0 copy of the report from the database.</para>
      </listitem>
      <listitem>
        <para><literal>svn diff
        <replaceable>reportname</replaceable>.xml</literal> and review the
        changes manually to make sure they look right</para>
      </listitem>
      <listitem>
        <para><literal>svn commit
        <replaceable>reportname</replaceable>.xml</literal></para>
        <para>Put a short description of <emphasis>why</emphasis> you made
        this change in your checkin comment, including the Mantis issue number
        if there is one. The 'what' is clear from the differences between the
        previous version and what you checked in.</para>
      </listitem>
    </orderedlist>
    <para>If this change is related to a Mantis issue, see the <link
    linkend="bugs">Fixing Bugs</link> or <link linkend="features">Adding
    Features</link> sections for further guidance.</para>
  </section>
  <section>
    <title id="guiclient">Changing the GUI Client</title>
    <para>One of the things we're trying to do to the existing code in OpenMFG
    is move the SQL out of the source code, particularly the more complex
    MetaSQL queries, and into a separate resource file. This will eventually
    allow for patching some bugs without shipping whole binary packages,
    sharing queries between source files, and other neat things. To implement
    queries as resources:</para>
    <orderedlist>
      <listitem>
        <para><literal>cd xtuple/guiclient</literal></para>
      </listitem>
      <listitem>
        <para>edit
        <literal>sql/<replaceable>file</replaceable>.mql</literal></para>
        <para>where <literal><replaceable>file</replaceable></literal> = the
        name of the class followed by a simplified version of the method name
        from which the query is called, e.g.
        <literal>dspShipmentsByDateFillList.mql</literal> holds the query
        called by the <literal>sFillList()</literal> method in the
        <literal>dspShipmentsByDate.cpp</literal> source file. Put the query,
        including MetaSQL tags if necessary, in this <literal>.mql</literal>
        file.</para>
      </listitem>
      <listitem>
        <para>add 3 lines to sql/OpenMFGQueryData.qrc</para>
        <para><programlisting>&lt;qresource prefix="<replaceable>module</replaceable>"&gt;
  &lt;file alias="<replaceable>/pseudo-path</replaceable>/<replaceable>nameofquery</replaceable>.mql"&gt;<replaceable>file.mql</replaceable>&lt;/file&gt;
&lt;qeresource&gt;</programlisting><parameter>The <literal>module</literal>
        value for the <literal>prefix</literal> attribute should be the same
        as the prefix of the action name used to create the calling window in
        the menu structure (see elsewhere for action
        names).</parameter></para>
        <para><parameter>The <literal>pseudo-path</literal> should approximate
        the menu structure followed to get to the calling
        window.</parameter></para>
        <para><parameter>The <literal>nameofquery</literal> should be the name
        of the method that calls this query with perhaps a clarifying
        suffix.</parameter></para>
        <para><parameter>The content of the <literal>file</literal> tag should
        be the base filename of the file created in the previous
        step.</parameter></para>
        <para><parameter>An example:</parameter><programlisting>&lt;qresource prefix="sr"&gt;
  &lt;file alias="displays/ShipmentsByDate/FillListDetail.mql"&gt;dspShipmentsByDateFillList.mql&lt;/file&gt;
&lt;/qresource&gt;
</programlisting></para>
      </listitem>
      <listitem>
        <para>In the C++ source file that needs to call this query:</para>
        <programlisting>#include &lt;metasql.h&gt;
#include "mqlutil.h"
...
// in the method that calls the query
ParameterList params;  // if there are MetaSQL parameters to set then
setParams(params);     // either have a method that sets them or set them inline here
MetaSQLQuery mql = mqlLoad(":/<replaceable>module</replaceable>/<replaceable>pseudo-path</replaceable>/<replaceable>nameofquery</replaceable>.mql");
XSqlQuery myQuery = mql.toQuery(params);
if (myQuery.first())
...</programlisting>
      </listitem>
      <listitem>
        <para>Rebuild the application and test.</para>
      </listitem>
    </orderedlist>
    <para></para>
  </section>
  <section>
    <title id="widgets">Adding Custom Widgets</title>
    <para>Guidelines for developing widgets haven't yet been codified.</para>
    <para>There are several steps required to implement a new widget for use
    in the application and make it visible in <productname>Qt
    Designer</productname>. Here they all are:</para>
    <orderedlist>
      <listitem>
        <para>Create the
        <filename><replaceable>widget</replaceable>.cpp</filename> and
        <filename><replaceable>widget</replaceable>.h</filename> file that
        implement your new widget in the <filename>widgets</filename>
        directory. The
        <filename><replaceable>widget</replaceable>.h</filename> filename must
        be all lowercase regardless of the capitalization of
        <filename><replaceable>widget</replaceable>.cpp</filename> or the
        class name.</para>
      </listitem>
      <listitem>
        <para>Create the widget's plug-in
        <filename><replaceable>widget</replaceable>plugin.h</filename> file in
        <filename>widgets/plugins</filename>. Copy and edit an existing
        plug-in header file to make sure you get all of the required
        information. If <filename>widget.cpp</filename> and
        <filename><replaceable>widget</replaceable>.h</filename> implement
        more than one custom widget that you want visible in Qt Designer,
        create separate plug-in header files for each widget.</para>
      </listitem>
      <listitem>
        <para>Edit the <filename>widgets.pro</filename> file and add
        <filename><replaceable>widget</replaceable>plugin.h</filename> file(s)
        to the first <literal>HEADERS</literal> list,
        <filename><replaceable>widget</replaceable>.cpp</filename> to the
        <literal>SOURCES</literal> list, and
        <filename><replaceable>widget</replaceable>.h</filename> file to the
        second <literal>HEADERS</literal> list</para>
      </listitem>
      <listitem>
        <para>Edit OpenMFGWidgets.cpp and add an <code>#include</code> for
        <filename><replaceable>widget</replaceable>plugin.h</filename> and add
        an <code>m_plugins.append()</code> for the plug-in class.</para>
      </listitem>
      <listitem>
        <para>Rebuild the <filename>Makefile</filename>s in the widgets
        directory:<programlisting>cd widgets
rm Makefile*
qmake</programlisting></para>
      </listitem>
      <listitem>
        <para>Quit <productname>Qt Designer</productname> if you have it
        running.</para>
      </listitem>
      <listitem>
        <para>From the top source directory, not the
        <filename>widgets</filename> subdirectory, build the
        application:<programlisting>cd ..
make #or mingw32-make or ...</programlisting>You may have to remove the old
        plug-in shared library manually for this to work. The plug-in shared
        library is named something like
        <filename>$QTDIR/plugins/designer/libxtuplewidgets.<replaceable>shared-library-suffix</replaceable></filename>.</para>
      </listitem>
      <listitem>
        <para>Start <productname>Qt Designer</productname>.</para>
      </listitem>
    </orderedlist>
    <para></para>
  </section>
  <section>
    <title>Changing the Database Structure</title>
    <para>The PostBooks and OpenMFG applications use very similar databases.
    The majority of tables, views, triggers, and stored procedures are shared.
    The <filename>xtupleserver</filename> <application>SVN</application>
    module holds scripts to create these shared views, triggers, and stored
    procedures. In addition, the scripts used to update individual aspects of
    the database structure from one release to the next, e.g. to add table
    columns or indexes, are also stored in the
    <filename>xtupleserver</filename> module. Any functionality or changes
    specific to <application>OpenMFG</application> <application>should be
    checked in to the appropriate </application>repository.</para>
    <para>Here are the conventions for SQL scripts used to define or change
    aspects of the database structure:</para>
    <itemizedlist>
      <listitem>
        <para>File names should end with the suffix
        <literal>.sql</literal></para>
      </listitem>
      <listitem>
        <para>File names should consist entirely of lowercase letters except
        as noted below.</para>
      </listitem>
      <listitem>
        <para>Files which change the structure of existing tables should be
        named
        <filename>alter<replaceable>Tablename</replaceable>.sql</filename> -
        note the uppercase letter at the beginning of the table name.</para>
      </listitem>
      <listitem>
        <para>Files which add tables, privileges, and indexes should be named
        <filename>create<replaceable>Shortdescrip</replaceable>.sql</filename>
        - again note the one uppercase letter in the middle.</para>
      </listitem>
      <listitem>
        <para>Create explicit transactions for alter and create scripts that
        have multiple lines in them. Use <literal>COMMIT</literal> to close
        these transactions, never the PostgreSQL extension
        <literal>END</literal>.</para>
      </listitem>
      <listitem>
        <para>Disable triggers before running <literal>ALTER TABLE</literal>
        if possible. This will prevent problems where updates to tables cause
        triggers to execute and potentially fail because of alterations to one
        or more tables. This can be skipped if there is reason to do so but if
        you don't disable the triggers then document the required specific
        order of script execution.<programlisting>ALTER TABLE table DISABLE TRIGGER ALL;
-- make changes here
ALTER TABLE table ENABLE TRIGGER ALL;</programlisting></para>
      </listitem>
      <listitem>
        <para>Create a <filename>precheck.sql</filename> or add to an existing
        <filename>precheck.sql</filename> file a <literal>SELECT</literal>
        statement to search for any data that might cause a database upgrade
        to fail. This <literal>SELECT</literal> statement should return
        <literal>TRUE</literal> if the data can be successfully upgraded and
        <literal>FALSE</literal> if not. For example, if changing a column to
        a foreign key, the precheck statement should query that column and
        return <filename>TRUE</filename> if all values in the existing data
        meet the foreign key requirement and <filename>FALSE</filename> if
        some values do not refer to existing records.</para>
      </listitem>
    </itemizedlist>
    <section>
      <title id="storedprocs">Changing Stored Procedures</title>
      <para>Do <emphasis>not</emphasis> extract a stored procedure from a
      database to edit it; there are several reasons why this is a bad idea.
      Here is the correct process to follow:</para>
      <orderedlist>
        <listitem>
          <para><literal>update</literal> your
          <filename>xtupleserver</filename> and OpenMFG-specific
          checkouts.</para>
        </listitem>
        <listitem>
          <para>change to the <filename>dbscripts/functions</filename>
          directory</para>
        </listitem>
        <listitem>
          <para>Find the file that contains the stored procedure(s) you need
          to change. Each file should be named after the stored procedure it
          contains.</para>
        </listitem>
        <listitem>
          <para>Make and test your changes to the stored procedure file. To
          test them, you will need to load your changes into the database. One
          way to do this is with the <literal>psql</literal> command line
          tool:<programlisting><prompt>$ </prompt>psql
<prompt>Password:</prompt>
<prompt>database=#</prompt> \i <replaceable>storedprocfilename</replaceable></programlisting></para>
        </listitem>
        <listitem>
          <para><literal>svn diff
          <replaceable>storedprocfilename</replaceable></literal> and review
          the changes manually to make sure they look right</para>
        </listitem>
        <listitem>
          <para><literal>svn commit
          <replaceable>storedprocfilename</replaceable></literal></para>
          <para>Put a short description of <emphasis>why</emphasis> you made
          this change in your checkin comment, including the Mantis issue
          number if there is one. The 'what' is clear from the differences
          between the previous version and what you checked in.</para>
        </listitem>
      </orderedlist>
      <para>If this change is related to a Mantis issue, see the <link
      linkend="bugs">Fixing Bugs</link> or <link linkend="features">Adding
      Features</link> sections for further guidance.</para>
      <para>Style:</para>
      <para>Use IF ... ELSIF ... ENDIF; as much as possible. It's much easier
      to code correctly and maintain than IF ... ELSE IF ... ENDIF;
      ENDIF;</para>
      <para>Use single-quoting to wrap the body of a stored procedure, not $$
      or $BODY$ quoting. These alternatives do not work with all of the
      versions of PostgreSQL that our customers use.</para>
    </section>
  </section>
  <section>
    <title>Changing Documentation</title>
    <para>You may also want to edit the documentation, most of which is
    written in XML using DocBook for markup. Master copies of all of the
    documentation live in the <literal>xtupledocs</literal> repository.</para>
    <para>developers' guide vs user documentation vs specs vs online
    help</para>
    <orderedlist>
      <listitem>
        <para></para>
      </listitem>
    </orderedlist>
    <para></para>
  </section>
  <section>
    <title>Adding Images to the application</title>
    <para>First read Qt's documentation on the <ulink
    url="http://doc.trolltech.com/4.2/rcc.html">Resource Compiler
    (rcc)</ulink>. Here are the xTuple conventions:</para>
    <itemizedlist>
      <listitem>
        <para>Try to use a PNG or XMP file for your image.</para>
      </listitem>
      <listitem>
        <para>Put the image file in the <filename>images</filename>
        subdirectory of the source code directory where the image is used by
        the application.</para>
      </listitem>
      <listitem>
        <para>If there isn't already a Qt Resource (<filename>.qrc</filename>)
        file in the source code directory or in the images subdirectory,
        create one and name it after the directory in which you put it (e.g.
        <filename>guiclient.qrc</filename>)</para>
      </listitem>
    </itemizedlist>
    <para>Make sure the resource path referred to by the source code matches
    the resource path in the <filename>.qrc</filename> file.</para>
  </section>
</article>