<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../specs/docbook-omfg.css"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3b2/docbookx.dtd">
<article>
  <title>Developers' Guide to</title>
  <subtitle>Bar Code Scanning</subtitle>
  <articleinfo>
    <corpauthor>OpenMFG, LLC</corpauthor>
    <pubdate>$Date: 2008/03/12 15:39:26 $</pubdate>
    <edition>cvs $Revision: 1.4 $</edition>
    <copyright>
      <year>2006</year>
      <holder>OpenMFG, LLC</holder>
    </copyright>
  </articleinfo>
  <para>The <application>xTuple ERP</application> application provides hooks
  for using a bar code scanner to enter application data.</para>
  <para>This document is intended for two distinct audiences: users who plan
  to write reports for use with xTuple ERP and developers who plan to
  implement new windows or expand the bar code data entry capabilities of
  existing windows.</para>
  <para>To make full use of this document, you need a printer capable of
  producing bar codes in several formats, a scanner that can read them, and
  access to the application and database. Most printers capable of producing
  graphics, such as ink jet and laser printers, will work. Developers also
  need a development environment. Directions on setting up a development
  environment can be found in a <ulink url="DevelopmentEnvSetup.xml">separate
  article</ulink>.</para>
  <section>
    <title><application>OpenMFG</application> Bar Code Basics</title>
    <para>The key to understanding how the <application>xTuple
    ERP</application> application works with bar codes is that bar code
    scanners are connected to the user's computer or terminal as a second
    keyboard. The application needs extra information to distinguish between
    data scanned by the bar code reader and data entered manually.</para>
    <para>When a person scans a bar code off a commercially available product,
    such as the UPC label on a grocery item, that bar code simply encodes a
    stream of letters and digits. If that person is running the
    <application>xTuple ERP</application> application, the bar code data are
    entered into the currently active field on the screen. This document will
    refer to these as "simple" bar codes.</para>
    <para>For keyboard-free operations the bar codes to be scanned need
    additional information to tell the application that they are
    application-specific and what kind of information is embedded in the bar
    codes. This document will refer to these as "smart" bar codes.</para>
  </section>
  <section id="reportWriters">
    <title id="reportwriters">Report Writers</title>
    <para><application>OpenRPT</application>, the report writing engine
    embedded in the <application>xTuple ERP</application> application,
    supports a number of bar code encodings, such as UPC A and 3 of 9. To put
    a bar code on a report, use the bar code field type on the form
    designer.</para>
    <para>If the report is for external use, such as a packing list, then use
    a simple bar code. Make sure your query selects the field you want to
    represent. Click the bar code icon from the toolbar or select Insert -&gt;
    Bar Code from the menu bar, then click on the report form to place the bar
    code in the desired location. Edit the properties of the bar code field to
    associate the field with the desired encoding scheme, query, and query
    column.</para>
    <para>If you are writing a report for internal use then you should use a
    smart bar code. As with a simple bar code, insert your bar code field in
    the report and set its properties. However, the query needs to be
    different and the encoding scheme choices are restricted. You much choose
    a bar code format that handles control characters;
    <orgname>xTuple</orgname> recommends using the 128 encoding. The query
    must use one of the existing stored procedures that generates smart bar
    code values. At this time these are limited to the following:</para>
    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="center">Desired Data</entry>
            <entry align="center">Stored Procedure Name</entry>
            <entry align="center">Input</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Count Tag Number</entry>
            <entry>formatCountTagBarCode</entry>
            <entry>invcnt_id</entry>
          </row>
          <row>
            <entry>Item or Item Site</entry>
            <entry>formatItemSiteBarCode</entry>
            <entry>itemsite_id</entry>
          </row>
          <row>
            <entry>Location Name</entry>
            <entry>formatLocationBarCode</entry>
            <entry>location_id</entry>
          </row>
          <row>
            <entry>Location Contents</entry>
            <entry>formatLocationContentsBarCode</entry>
            <entry>location_id</entry>
          </row>
          <row>
            <entry>Location Issue</entry>
            <entry>formatLocationIssueBarCode</entry>
            <entry>location_id</entry>
          </row>
          <row>
            <entry>Sales Order Number</entry>
            <entry>formatSoBarCode</entry>
            <entry>cohead_id</entry>
          </row>
          <row>
            <entry>Sales Order Line Item</entry>
            <entry>formatSoItemBarCode</entry>
            <entry>coitem_id</entry>
          </row>
          <row>
            <entry>OpenMFG Application User</entry>
            <entry>formatUserbarCode</entry>
            <entry>usr_id</entry>
          </row>
          <row>
            <entry>Work Order Number</entry>
            <entry>formatWorkOrderBarCode</entry>
            <entry>wo_id</entry>
          </row>
          <row>
            <entry>Work Order Operation</entry>
            <entry>formatWooperBarCode</entry>
            <entry>wooper_id</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>if you want both simple and smart bar codes, the query should get
    the data in both forms. For example a report which will be used as both an
    in-house pick list and a packing list to be enclosed with a shipment
    should have two bar code fields and a SELECT statement that looks like
    this:<programlisting>SELECT cohead_number, formatSoBarCode(cohead_id) AS cohead_barcode, ...
WHERE cohead_id = &lt;? value("cohead_id") ?&gt;
...</programlisting></para>
    <para>This makes available to the report both the Sales Order Number for
    the recipient to scan and the smart bar code content for in-house
    use.</para>
  </section>
  <section id="developers">
    <title id="applicationdevelopers">Application Developers</title>
    <section>
      <title>Window development</title>
      <para>Just as there are simple and smart bar codes, the application
      window can be either naive in its handling of bar codes or
      sophisticated. To handle simple bar codes the application does not need
      any modifications, although this imposes a requirement on the user: s/he
      must focus on the correct field in the window before scanning. Smart bar
      codes require less user interaction but more software to make up for
      it.</para>
      <para>There is a Qt event filter in the application that specifically
      anticipates smart bar code input. This is implemented in the
      <classname>InputManager</classname> class. The OpenMFG application
      instantiates only one <classname>InputManager</classname> object, which
      is available as <literal>omfgThis-&gt;inputManager()</literal>. A window
      that will receive smart bar code input must have a Qt slot to handle the
      input and a connection to the <classname>inputManager</classname>, such
      as the following:<programlisting>windowClass::windowClass(QWidget* parent)
    : parentClass(parent)
{
    ...
    omfgThis-&gt;inputManager()-&gt;notify(cBCWorkOrder, this, this, SLOT(sWoidScanned(int)));
    ...
}
...
void windowClass::sWoidScanned(int pwoid)
{
    ... // do something interesting with the work order id
}</programlisting></para>
      <para>The slot to which the wo_id in this example is sent does not need
      to be implemented in the <classname>windowClass</classname> itself. It
      could just as easily be a slot in one of the widgets on the
      window:<programlisting>    ...
    omfgThis-&gt;inputManager()-&gt;notify(cBCWorkOrder, this, _wo, SLOT(setId(int)));
    ...</programlisting> The first argument of the inputManager's
      <literal>notify</literal> method is a symbolic constant. See the source
      file <filename>OpenMFGGUIClient/inputManager.h</filename> for a list of
      values.</para>
    </section>
    <section>
      <title>Adding a new field to be barcoded</title>
      <para>If the feature you are developing needs to define a new smart bar
      code, you write a new stored procedure to format the bar code and modify
      the <classname>InputManager</classname> class.</para>
      <para>The new stored procedure is fairly simple:<funcsynopsis lang="sql">
          <funcprototype>
            <funcdef>format<replaceable>Whatever</replaceable>Barcode</funcdef>
            <paramdef><parameter>integer</parameter></paramdef>
          </funcprototype>
          <funcsynopsisinfo>returns text</funcsynopsisinfo>
        </funcsynopsis>The <type lang="sql">integer</type> parameter is the
      internal ID of the record you want bar coded. The return value is a text
      string with the following format:</para>
      <variablelist>
        <varlistentry>
          <term>Signal character</term>
          <listitem>
            <para>\138</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Bar Code Type Identifier</term>
          <listitem>
            <para>A 4 character code that must uniquely identify the nature of
            this bar code's contents. These are defined and associated with
            the <literal>cBC*</literal> named constants in the
            <literal>_eventList</literal> array.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Field Lengths</term>
          <listitem>
            <para>A list of integer values describing the length of the data
            to come. There must be one length value for each text field that
            will be embedded in the bar code.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Text Fields</term>
          <listitem>
            <para>A list of text values representing the actual data to be
            embedded in the bar code.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>The body of the stored procedure should build this text string and
      return it. In most cases this will be simply a matter of writing a
      SELECT statement that returns a single row, which consists of a
      concatenation of the desired data.</para>
      <para>To change the <classname>InputManager</classname> class, add a new
      constant and a new <literal>read*</literal> signal to
      <filename>inputManager.h</filename>, choose a bar code type identifier
      string and add it to the <literal>_eventList</literal> array, modify the
      <literal>eventFilter</literal> method, and write a dispatch
      method.</para>
      <para>need text here to describe how to do each of these things</para>
    </section>
    <section>
      <title>Existing Bar Code Functionality</title>
      <para>Here's how to use the existing smart bar codes:<informaltable>
          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center">Stored Procedure Name</entry>
                <entry align="center">Constant to pass to <code
                lang="cpp">inputManager()-&gt;notify()</code></entry>
                <entry align="center">Data Passed by <code
                lang="cpp">notify()</code> to <code
                lang="cpp">SLOT()</code></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><database
                lang="sql">formatCountTagBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database
                lang="sql">formatItemsiteBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database
                lang="sql">formatLocationBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database
                lang="sql">formatLocationContentsBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database
                lang="sql">formatLocationIssueBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database
                lang="sql">formatsSOBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database
                lang="sql">formatSOItemBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database
                lang="sql">formatUserBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database lang="sql">formatWOBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
              <row>
                <entry><database
                lang="sql">formatWooperBarcode</database></entry>
                <entry></entry>
                <entry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>
  </section>
</article>