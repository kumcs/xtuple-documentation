<?xml version="1.0" encoding="US-ASCII"?>
<!-- Copyright (c) 1998-2010 by xTuple. All rights reserved. -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Development Environment Setup</title>
  <!--This chapter is designed to be split into separate subsections before rendering.
That makes it hard to edit unless viewed in XXE with xTuple's docbook-xtuple.css.
This CSS file labels and colors elements by OS and adds markers to distinguish
between install-from-source and install-from-binary-package content.
xsltproc and xtupledocs/xsl/splitbyos.xsl can be used to extract the subsections.
The book file xtupledocs/devguide/devguide.xml xincludes these subsections.
Contact xTuple for help configuring XXE to use the .css and .xsl files.

Use the following attributes and values to mark elements that only pertain to
specific configurations:
  os        windows, linux, macosx     platform-specific
  condition mingw, msvc                compiler-specific, only use when os=windows
  userlevel installfromsrc, installfrompkg-->
  <para>This chapter is intended for use by experienced software developers
  who need to modify the xTuple ERP source code. It covers specific steps and
  details required to create a C++ development environment. People who simply
  want to create xTuple ERP application scripts and scripted packages, or
  people who want to write reports, can skip this chapter.</para>
  <section>
    <title>Operating System and Basic Development Tools</title>
    <para os="windows">xTuple recommends using MinGW for developing on Windows
    although we have also tried Microsoft Visual C++ Express (MSVC). We found
    that MSVC required more work than MinGW to distribute binaries to
    non-build machines or to run the resulting binaries from file
    servers.</para>
    <para condition="mingw" os="windows" userlevel="installfromsrc">Newer
    versions of the Qt SDK include MinGW. If you plan to build Qt from source,
    however, you will need to obtain MinGW separately.</para>
    <orderedlist condition="mingw" os="windows" userlevel="installfromsrc">
      <listitem>
        <para>Point your browser to <ulink
        url="???">http://sourceforge.net/projects/mingw/</ulink></para>
      </listitem>
      <listitem>
        <para>Click on Download Now</para>
      </listitem>
      <listitem>
        <para>If you are prompted, choose to save the
        <literal>mingw-get-inst-version.exe</literal> file</para>
      </listitem>
      <listitem>
        <para>Run the downloaded installer. When it asks which components to
        install, select at least the C++ compiler, the MSYS Basic System, and
        the Developer Toolkit. Otherwise accept all of the defaults</para>
      </listitem>
    </orderedlist>
    <para condition="msvc" os="windows">To get MSVC:<orderedlist>
        <listitem>
          <para>point your browser to <ulink
          url="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express">http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express</ulink></para>
        </listitem>
        <listitem>
          <para>click on Install Now and follow the instructions</para>
        </listitem>
        <listitem>
          <para>accept the defaults</para>
        </listitem>
      </orderedlist></para>
    <para os="macosx">Get and install Xcode. The operating system installation
    DVD should have it. If not:<orderedlist>
        <listitem>
          <para>http://developer.apple.com/</para>
        </listitem>
        <listitem>
          <para>click Mac Dev Center and either sign in if you are an Apple
          Developer Connection member or sign up if you are not a member yet.
          After you've signed in, click the Download button. This is a large
          download, so be prepared to wait for a while and possibly restart
          the download. If the disk image is not automatically mounted for
          you, double-click on the xcode .dmg file and mount it.</para>
        </listitem>
        <listitem>
          <para>Double-click on the installer icon and follow the
          directions.</para>
        </listitem>
      </orderedlist></para>
    <para os="linux">Make sure you have X11 installed. This is the default in
    most Linux distributions. Most Linux distributions also install software
    development tools by default. If they are not there, update your
    installation with packages for C++, build tools, and SVN. You will need at
    least the following basic packages or their equivalents (this list comes
    from Ubuntu 10):</para>
    <itemizedlist os="linux">
      <listitem>
        <para>g++</para>
      </listitem>
      <listitem>
        <para>gcc</para>
      </listitem>
      <listitem>
        <para>libcups2-dev</para>
      </listitem>
      <listitem>
        <para>libdbus-1-dev</para>
      </listitem>
      <listitem>
        <para>libdbus-c++-dev</para>
      </listitem>
      <listitem>
        <para>libext-dev</para>
      </listitem>
      <listitem>
        <para>libglib</para>
      </listitem>
      <listitem>
        <para>libkrb5-dev</para>
      </listitem>
      <listitem>
        <para>libldap-dev</para>
      </listitem>
      <listitem>
        <para>libmysqlclient-dev</para>
      </listitem>
      <listitem>
        <para>libncurses5-dev</para>
      </listitem>
      <listitem>
        <para>libpam-dev or libpam0g-dev</para>
      </listitem>
      <listitem>
        <para>libreadline-dev</para>
      </listitem>
      <listitem>
        <para>libsqlite0-dev</para>
      </listitem>
      <listitem>
        <para>libssl-dev</para>
      </listitem>
      <listitem>
        <para>libx11-dev</para>
      </listitem>
      <listitem>
        <para>libxinerama-dev</para>
      </listitem>
      <listitem>
        <para>make</para>
      </listitem>
      <listitem>
        <para>unixodbc-dev</para>
      </listitem>
      <listitem>
        <para>zlib1g-dev</para>
      </listitem>
    </itemizedlist>
    <note os="linux">
      <para>This list is a rough estimate of what you need. It does not
      include all required dependencies. Some of these are only required if
      you are building PostgreSQL and Qt from source.</para>
    </note>
  </section>
  <section>
    <title>Get and install Subversion</title>
    <para os="windows">You can find binary packages of Subversion at <ulink
    url="http://subversion.tigris.org/project_packages.html">http://subversion.apache.org/download</ulink>.</para>
    <para os="macosx">The command line utilities for Subversion are installed
    with Xcode.</para>
    <para os="linux">Most Linux distributions have packages available for
    installing the SVN command line tools called "subversion".</para>
    <para>If you need a graphical user interface environment for Subversion,
    xTuple suggests using RapidSVN. Several of our developers use it in-house,
    so we may be able to answer questions about it. If you decide to use
    RapidSVN, you need to get that separately from <ulink
    url="http://rapidsvn.tigris.org/">http://rapidsvn.tigris.org/</ulink>.</para>
  </section>
  <section role="xtconnect">
    <title>Get and install Git</title>
    <para>Git is a version control system used by some of xTuple's development
    partners. You will need it to build the email integration portions of
    xTuple Connect.</para>
    <para os="linux macosx" userlevel="installfrompkg">Go to <ulink
    url="???">http://git-scm.com/</ulink> and click Download. Click on the
    link for your operating system. Click on the link for your particular work
    environment. Run the downloaded executable or open the .dmg.</para>
    <para os="linux">Most Linux distributions have a git package, typically
    called "git". If yours does not, you will have to build git from
    source.</para>
    <para os="linux" userlevel="installfromsrc">To build Git from sources, go
    to <ulink
    url="http://www.kernel.org/pub/software/scm/git/">http://www.kernel.org/pub/software/scm/git/</ulink>
    and click on the link for a recent <literal>git-version.tar.gz</literal>
    to download it. Then follow the steps in the INSTALL file.</para>
    <para os="windows">For installation on Windows, go to <ulink
    url="http://help.github.com/win-set-up-git/"><link
    linkend="???">http://help.github.com/win-set-up-git/</link></ulink>.
    Follow the instructions and accept the default values.</para>
  </section>
  <section>
    <title>Get and install PostgreSQL</title>
    <para>You will need header files and the libpq library to build and run
    OpenRPT, CSVImp, xTuple ERP, and the Updater. Point your web browser to
    <ulink url="www.postgresql.org">www.postgresql.org</ulink> and click on
    Downloads. Choose whether you are going to download a binary or source
    package and follow the appropriate links.</para>
    <table>
      <title>PostgreSQL compatibility</title>
      <tgroup cols="3">
        <colspec colnum="1" colwidth="1*"/>
        <colspec colnum="2" colwidth="1*"/>
        <colspec colnum="3" colwidth="2*"/>
        <tbody>
          <row>
            <entry>xTuple ERP</entry>
            <entry>PostgreSQL</entry>
            <entry userlevel="installfromsrc">Configuration Parameters</entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>From</entry>
                  <entry>To</entry>
                </row>
              </tbody>
            </entrytbl>
            <entrytbl cols="3">
              <tbody>
                <row>
                  <entry>Min</entry>
                  <entry>Max</entry>
                  <entry>Built With</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry/>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>3.0</entry>
                  <entry>3.1.0</entry>
                </row>
              </tbody>
            </entrytbl>
            <entrytbl cols="3">
              <tbody>
                <row>
                  <entry>8.0</entry>
                  <entry>8.3</entry>
                  <entry/>
                </row>
              </tbody>
            </entrytbl>
            <entry userlevel="installfromsrc">--without-openssl
            --prefix=/dir/where/you/want/to/install/postgresql<para
            os="macosx"
            userlevel="installfromsrc">--with-bonjour</para></entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>3.2.0</entry>
                  <entry>3.7.3</entry>
                </row>
                <row>
                  <entry>3.7.4, 3.8.0</entry>
                  <entry>?</entry>
                </row>
              </tbody>
            </entrytbl>
            <entrytbl cols="3">
              <tbody>
                <row>
                  <entry>8.0</entry>
                  <entry>8.4</entry>
                  <entry>8.3.3</entry>
                </row>
                <row>
                  <entry>8.2</entry>
                  <entry>9.0.4</entry>
                  <entry>9.0.4</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry userlevel="installfromsrc">--with-krb5 --with-pam
            --with-openssl --with-readline
            --prefix=/dir/where/you/want/to/install/postgresql<para
            os="macosx" userlevel="installfromsrc">--with-bonjour
            CFLAGS="-arch i386"</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para condition="mingw" os="windows">The PostgreSQL community no longer
    distributes binary packages of PostgreSQL built with MinGW. According to
    the PostgreSQL documentation you will have to build PostgreSQL from
    source.</para>
    <para condition="msvc" os="windows" userlevel="installfromsrc">The
    PostgreSQL community recommends using binary distributions for Windows.
    However, if you do want to builds PostgreSQL from source, see the <ulink
    url="http://www.postgresql.org/docs/9.1/interactive/install-windows.html">PostgreSQL
    documentation</ulink> for instructions.</para>
    <para condition="msvc" os="windows" userlevel="installfrompkg">Install the
    PostgreSQL binary distribution using the one-click installer from
    Enterprise DB:</para>
    <orderedlist condition="msvc" os="windows" userlevel="installfrompkg">
      <listitem>
        <para>There is a section marked "Binary Packages" near the top of the
        Downloads page. Click on "Windows"</para>
      </listitem>
      <listitem>
        <para>Click on the appropriate button for your Windows environment in
        the "One click installer" section.</para>
      </listitem>
      <listitem>
        <para>If you are prompted by your browser, choose to SAVE the
        <literal>postgresql-version-windows.exe</literal> file.</para>
      </listitem>
      <listitem>
        <para>After the download is complete, double-click
        <literal>postgresq-version-windows.exe</literal> file and follow the
        instructions.</para>
      </listitem>
    </orderedlist>
    <para os="macosx">xTuple strongly recommends that you build PostgreSQL
    from source on Mac OS X. Otherwise you run the significant risk that
    PostgreSQL and Qt will not be compatible. We have had repeated problems
    with packages being built for different hardware architectures. In our
    experience PostgreSQL has been built for PPC and 32-bit Intel processors
    while Qt has been built for 64-bit Intel processors, so the two packages
    cannot interact.</para>
    <orderedlist os="macosx">
      <listitem>
        <para>Click on Mac OS X.</para>
      </listitem>
      <listitem>
        <para>Click on Mac OS X 10.4+.</para>
      </listitem>
      <listitem>
        <para>On the EnterpriseDB page that appears, click on Mac OS X (this
        is <ulink
        url="http://www.enterprisedb.com/products/pgdownload.do">http://www.enterprisedb.com/products/pgdownload.do</ulink>
        ).</para>
      </listitem>
      <listitem>
        <para>After the download completes, read the README file for
        instructions on changing the shared memory configuration of your Mac.
        Changing this will require rebooting your Mac but is only necessary if
        you intend to run a PostgreSQL database server on your Mac.
        Double-click the installer to install PostgreSQL. Accept all of the
        defaults except possibly "Launch Stack Builder at exit" on the last
        step of the installation.</para>
      </listitem>
      <listitem>
        <para>Now install pgcrypto support in the template1
        database:<programlisting>$ su postgres
$ cd /Library/PostgreSQL/version
$ bin/psql -d template1 -f share/postgresql/contrib/pgcrypto.sql </programlisting></para>
      </listitem>
    </orderedlist>
    <para os="linux">Do not use the PostgreSQL packages installed by your
    Linux distribution's package manager. This can lead to problems when
    packages get automatically upgraded.</para>
    <para os="linux" userlevel="installfrompkg"><orderedlist>
        <listitem>
          <para>Click on Linux</para>
        </listitem>
        <listitem>
          <para>Scroll down to "Linux packages"</para>
        </listitem>
        <listitem>
          <para>Just below "Graphical installer", click on "Download the
          packages from EnterpriseDB"</para>
        </listitem>
        <listitem>
          <para>On the EnterpriseDB page that appears, click on Linux x82-32
          for the version of PostgreSQL you need</para>
        </listitem>
        <listitem>
          <para>Run the installer when the download is complete</para>
        </listitem>
      </orderedlist>Make sure to install pgcrypto support if the installer
    asks.</para>
    <para userlevel="installfromsrc">To build PostgreSQL from source, first
    download the source code from <ulink
    url="www.postgresql.org">www.postgresql.org</ulink>:</para>
    <orderedlist os="linux" userlevel="installfromsrc">
      <listitem>
        <para>Click DOWNLOADS</para>
      </listitem>
      <listitem>
        <para>Click SOURCE CODE</para>
      </listitem>
      <listitem>
        <para>Click on the desired version number</para>
      </listitem>
      <listitem>
        <para>Click on <literal>postgresql-version.tar.gz</literal></para>
      </listitem>
      <listitem>
        <para>Click on one of the download sites near you</para>
      </listitem>
      <listitem>
        <para>If prompted, choose to save the file</para>
      </listitem>
      <listitem>
        <para>Copy the file to a location where you want to build PostgreSQL
        (e.g. <literal>/usr/local/src/postgres</literal> or
        <literal>c:\postgresql</literal>) and unpack the source files:
        <literal>tar xzf postgresq-version.tar.gz</literal></para>
      </listitem>
    </orderedlist>
    <tip userlevel="installfromsrc">
      <para>While you are at the PostgreSQL web site, you might want to get
      the pgadmin GUI client as well. After your download of the PostgreSQL
      source code is complete, back up your web browser two levels and then
      click on pgadmin3 -&gt; release -&gt; latest version -&gt; os-name -&gt;
      pgadmin3-version.suffix and install from this bundle.</para>
    </tip>
    <para userlevel="installfromsrc">Then follow the steps in the PostgreSQL
    documentation on <ulink
    url="http://www.postgresql.org/docs/current/static/installation.html">installing
    from source code</ulink>.</para>
    <para condition="msvc" os="windows" userlevel="installfromsrc">If you plan
    to build Qt from source, you will need to build the client-side library
    for PostgreSQL from source.<orderedlist>
        <listitem>
          <para>Extract the contents of the archive to C:\postgresql</para>
        </listitem>
        <listitem>
          <para>Build libpq:</para>
          <programlisting>&gt; cd \postgresql\postgresql-version\src\interfaces\libpq</programlisting>
          <itemizedlist>
            <listitem>
              <para>disable the inline keyword by adding the following line at
              the beginning of ../../backend/mb/wchar.c:</para>
            </listitem>
          </itemizedlist>
          <programlisting>#define inline</programlisting>
          <programlisting>&gt; nmake /f win32.mak</programlisting>
        </listitem>
        <listitem>
          <para>Build and install the pgcrypto contributed software in the
          contrib\pgcrypto directory of the distribution.</para>
        </listitem>
      </orderedlist></para>
    <para condition="mingw" os="windows" userlevel="installfromsrc">Launch the
    msys application: <guimenuitem>Start &gt; MinGW &gt; MSys &gt;
    msys</guimenuitem></para>
    <para condition="mingw" os="windows" userlevel="installfromsrc">In the
    shell window that appears:</para>
    <programlisting condition="mingw" os="windows" userlevel="installfromsrc">&gt; ./configure --prefix=/c/postgresql/pgversion #see table above for options, possibly --without-readline --without-zlib
&gt; mingw32-make
&gt; mingw32-make install</programlisting>
    <para os="macosx" userlevel="installfromsrc">If you need to build
    universal binaries of PostgreSQL, see Mark Liyanage's blog.
    Otherwise:<programlisting>$ mkdir /opt/postgresql
$ cd /opt/postgresql
$ tar xzvf download-directory/postgresql-version.tar.gz
$ cd postgresql-version
$ ./configure # see table above for options
$ make
$ make check
$ cd contrib/pgcrypto
$ make
$ cd ../..
$ su
# make install
# cd contrib/pgcrypto
# make install</programlisting><orderedlist>
        <listitem>
          <para>Build and install PostgreSQL by following the directions in
          the INSTALL file up through and including the gmake install
          step.</para>
        </listitem>
        <listitem>
          <para>Create a directory to hold the PostgreSQL installation.</para>
        </listitem>
        <listitem>
          <para>As noted in the INSTALL file, gmake does not exist, so build
          using make.</para>
        </listitem>
        <listitem>
          <para>The 'make check' command tests the binaries to make sure they
          work before you install them.</para>
        </listitem>
      </orderedlist></para>
    <warning os="macosx" userlevel="installfromsrc">
      <para>If building Mac Universal binaries, you need to adjust the
      internal name that the PostgreSQL client library assigns to itself
      <emphasis>before you build Qt</emphasis>. Otherwise there may be
      problems logging in to the database server from the client
      applications.<programlisting>$ cd .../wherever/postgres/is/installed/lib
$ install_name_tool -id libpq.5.dylib libpq.5.dylib</programlisting></para>
    </warning>
    <para os="linux" userlevel="installfromsrc"><programlisting>$ mkdir /opt/postgresql
$ cd /opt/postgresql
$ tar xzvf download-directory/postgresql-version.tar.gz
$ cd postgresql-version
$ ./configure # see table above for options</programlisting></para>
    <para os="linux" userlevel="installfromsrc">If there is the slightest
    chance that you are going to use this PostgreSQL build to bundle xTuple
    software releases, xTuple recommends that you modify the
    <filename>Makefile</filename> for <filename>libpq</filename>. The
    following change reduces the number of external dependencies by statically
    linking various libraries used by <filename>libpq</filename>. Edit
    <filename>/postgres/source/directory/src/interfaces/libpq/Makefile</filename>
    and change the line that sets SHLIB_LINK if not win32 (line 59 in
    PostgreSQL 9.0): <programlisting><code>SHLIB_LINK += -Wl,-Bstatic $(filter -lcrypt -ldes -lcom_err -lcrypto -lk5crypto -lkrb5 \
              -lgssapi_krb5 -lgss -lgssapi -lssl -lsocket -lnsl -lresolv -lintl, $(LIBS))\
              -Wl,-Bdynamic $(LDAP_LIBS_FE) $(PTHREAD_LIBS)</code></programlisting>This
    adds the <literal>-Wl,-Bstatic</literal> flag before the
    <literal>$(filter)</literal>, then turns off static linking afterward the
    <literal>$(filter)</literal> with <literal>-Wl,-Bdynamic</literal>.</para>
    <para os="linux" userlevel="installfromsrc">Now proceed to build
    PostgreSQL, then test and install it:<programlisting>$ make
$ make check
$ su
# make install
# cd contrib/pgcrypto
# make install</programlisting>On some distributions you may have to use
    <literal>gmake</literal> instead of <literal>make</literal>.</para>
  </section>
  <section>
    <title>Get Qt from Nokia</title>
    <table>
      <title>Qt versions required to build various releases of xTuple
      ERP</title>
      <tgroup cols="3">
        <colspec colnum="1" colwidth="1*"/>
        <colspec colnum="2" colwidth="1*"/>
        <colspec colnum="3" colwidth="3*"/>
        <tbody>
          <row>
            <entry>xTuple ERP</entry>
            <entry>Qt</entry>
            <entry userlevel="installfromsrc">Configuration Parameters</entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>From</entry>
                  <entry>To</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry/>
            <entry userlevel="installfromsrc"/>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>??</entry>
                  <entry>??</entry>
                </row>
              </tbody>
            </entrytbl>
            <entrytbl cols="1">
              <tbody>
                <row>
                  <entry>4.1</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry userlevel="installfromsrc">-plugin-sql-psql -qt-gif
            -I/path/to/postgresql/include-L/path/to/postgresql/lib<para
            os="windows"
            userlevel="installfromsrc">-qt-style-windowsxp</para><para
            os="macosx"
            userlevel="installfromsrc">-no-framework</para></entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>2.1.0</entry>
                  <entry>2.2.1</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry>4.2.3</entry>
            <entry
            userlevel="installfromsrc">-shared-release-qt-sql-psql-qt-sql-odbc-qt-zlib
            -qt-gif -qt-libpng-qt-libjpeg
            -I/path/to/postgresql/include-L/path/to/postgresql/lib<para
            os="windows"
            userlevel="installfromsrc">-qt-style-windowsxp</para><para
            os="macosx" userlevel="installfromsrc">-no-framework
            -universal</para></entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>2.3.0</entry>
                  <entry>3.1.0</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry>4.3.2</entry>
            <entry userlevel="installfromsrc">-shared -release -qt-sql-psql
            -qt-sql-odbc -qt-zlib -qt-gif -qt-libpng -qt-libjpeg
            -I/path/to/postgresql/include -L/path/to/postgresql/lib<para
            os="windows"
            userlevel="installfromsrc">-qt-style-windowsxp</para><para
            os="macosx" userlevel="installfromsrc">-no-framework
            -universal</para></entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>3.2.0</entry>
                  <entry>3.2.2</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry>4.4.3</entry>
            <entry userlevel="installfromsrc">-plugin-sql-psql
            -plugin-sql-odbc -plugin-sql-sqlite -qt-zlib -qt-gif -qt-libtiff
            -qt-libpng -qt-libmng -qt-libjpeg -I/path/to/postgresql/include
            -L/path/to/postgresql/lib<para os="windows"
            userlevel="installfromsrc">-qt-style-windowsxp</para><para
            os="macosx" userlevel="installfromsrc">-no-framework
            -universal</para></entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>3.3.0</entry>
                  <entry>3.5.x</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry>4.5.1 or Qt SDK 2009.04</entry>
            <entry userlevel="installfromsrc">-plugin-sql-psql
            -plugin-sql-odbc -plugin-sql-sqlite -qt-zlib -qt-gif -qt-libtiff
            -qt-libpng -qt-libmng -qt-libjpeg -I/path/to/postgresql/include
            -L/path/to/postgresql/lib<para os="windows"
            userlevel="installfromsrc">-qt-style-windowsxp</para><para
            os="macosx" userlevel="installfromsrc">-no-framework
            -universal</para></entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>3.6.0</entry>
                  <entry>3.8.0</entry>
                </row>
              </tbody>
            </entrytbl>
            <entry>4.6.3 or Qt SDK 2010.04</entry>
            <entry userlevel="installfromsrc">-plugin-sql-psql
            -plugin-sql-odbc -plugin-sql-sqlite -qt-zlib -qt-gif -qt-libtiff
            -qt-libpng -qt-libmng -qt-libjpeg -I/path/to/postgresql/include
            -L/path/to/postgresql/lib<para os="windows"
            userlevel="installfromsrc">-qt-style-windowsxp</para><para
            os="linux">-prefix-install -prefix /where/you/want/qt </para><para
            os="macosx" userlevel="installfromsrc">-prefix-install -prefix
            /where/you/want/qt -no-framework -universal</para></entry>
          </row>
          <row>
            <entrytbl cols="2">
              <tbody>
                <row>
                  <entry>3.8.1???</entry>
                  <entry/>
                </row>
              </tbody>
            </entrytbl>
            <entry>4.8.0</entry>
            <entry userlevel="installfromsrc"><para>-prefix-install -prefix
            /where/you/want/qt -plugin-sql-psql -plugin-sql-odbc
            -plugin-sql-sqlite -qt-zlib -qt-libtiff -qt-libpng -qt-libmng
            -qt-libjpeg -I/path/to/postgresql/include
            -L/path/to/postgresql/lib -nomake examples -nomake
            demos</para><para os="macosx" userlevel="installfromsrc">-arch
            x86</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para userlevel="installfrompkg">Get and install Nokia's Qt. You can
    download it from <ulink
    url="http://qt.nokia.com/downloads/">http://qt.nokia.com/downloads/</ulink>.
    Click on the LGPL tab, then select the Download Qt SDK for your
    platform.</para>
    <para condition="msvc" os="windows" userlevel="installfrompkg">The
    prebuilt package for Qt using MSVC can be downloaded from <ulink
    url="http://qt.nokia.com/downloads/windows-cpp-vs2008">http://qt.nokia.com/downloads/windows-cpp-vs2008</ulink>.
    Install the Qt SDK, accepting the default options. This will create a
    C:\Qt folder containing 2009.04. After the installer is done, configure Qt
    and MSVC to work together by selecting "Visual Studio with Qt 4.6.0" from
    the Start menu.</para>
    <para condition="mingw" os="windows" userlevel="installfrompkg">The
    prebuilt package for Qt using MinGW can be downloaded from <ulink
    url="http://qt.nokia.com/downloads/sdk-windows-cpp">http://qt.nokia.com/downloads/sdk-windows-cpp</ulink>.
    Install the Qt SDK, accepting the default options. This will create a
    C:\QtSDK folder.</para>
    <para os="macosx">If you are going to build xTuple application binaries
    for release on OS X, xTuple currently recommends building Qt from source.
    Different Qt binary releases are built for different hardware
    architectures and some are built without PostgreSQL support.</para>
    <para os="macosx" userlevel="installfrompkg">The prebuilt package for Qt
    for Mac OSX can be downloaded from <ulink
    url="http://qt.nokia.com/downloads/sdk-mac-os-cpp">http://qt.nokia.com/downloads/sdk-mac-os-cpp</ulink>.
    Install the Qt SDK, accepting the default options. Be careful with this,
    as different versions of the Qt SDK binary packages are built for
    different hardware architectures and you may have trouble getting the Qt
    database drivers to work with the PostgreSQL client library.</para>
    <para os="linux">Do not use the Qt packages installed by your Linux
    distribution's package manager. This can lead to problems when packages
    get automatically upgraded. xTuple rarely switches to new Qt versions as
    soon as they are available, preferring the stability of using the same Qt
    release for several xTuple software releases.</para>
    <para userlevel="installfromsrc">You can find the Qt sources at <ulink
    url="http://download.qt.nokia.com/qt/source/">http://download.qt.nokia.com/qt/source/</ulink>.
    Building Qt from source takes a long time, so start your Qt build when you
    have lots of other work to do or before leaving work for the day.<note>
        <para>Even though the xTuple applications do not rely on the Qt3
        Support library, the Squish test framework does. If you are planning
        on testing the application with Squish, make sure that you build Qt
        with Qt3 support.</para>
      </note></para>
    <para condition="mingw" os="windows" userlevel="installfromsrc">After
    downloading the source . zip file, follow these steps to build from
    source:<orderedlist>
        <listitem>
          <para>Extract the .zip file to c:\qt</para>
        </listitem>
        <listitem>
          <para>In a command window</para>
          <programlisting>&gt; cd \qt\qt-everywhere-opensource-src-4.8.0
&gt; configure.exe [ Configuration Parameters from above ] -platform win32-g++
&gt; mingw32-make</programlisting>
        </listitem>
      </orderedlist></para>
    <para condition="msvc" os="windows" userlevel="installfromsrc">After
    downloading the source .zip file:<orderedlist>
        <listitem>
          <para>Extract the .zip file to</para>
          <programlisting>c:\qt\qt-everywhere-opensource-src-4.8.0 .</programlisting>
        </listitem>
        <listitem>
          <para>Start &gt; Programs -&gt; Microsoft Visual C++ Express Edition
          -&gt; Visual Studio Tools -&gt; Visual Studio 2005 Command
          Prompt</para>
        </listitem>
        <listitem>
          <programlisting>&gt; cd \qt\qt-everywhere-opensource-src-4.8.0
&gt; configure.exe -platform win32-msvc # Configuration Parameters from above</programlisting>
        </listitem>
        <listitem>
          <para>The configure step will probably fail with a link error in the
          src\sql subdirectory. If this happens then edit
          src\sql\Makefile.Release and change the reference from libpq.lib to
          libpqdll.lib on line ~22, then run nmake from the top level.</para>
        </listitem>
      </orderedlist></para>
    <para os="macosx" userlevel="installfromsrc">The following steps build and
    install Qt in the /opt/qt directory. If you want to use Qt's default
    location, skip the mkdir and cd steps and leaf off the -prefix* options to
    the configure command.<programlisting>$ mkdir /opt/qt
$ cd /opt/qt
$ tar xzf wherever-the-tarball-is/qt-everywhere-opensource-src-4.8.0.tar.gz
$ cd qt-everywhere-opensource-src-4.8.0
$ ./configure # Configuration Parameters from above
$ make
$ sudo make install</programlisting>The<literal> -no-framework</literal>
    argument in the table above has been selected to reduce the risk of
    conflict between binary and source installations of Qt. The -I and
    <literal>-L</literal> options are not necessary if you installed
    PostgreSQL in <literal>/usr</literal>, which is the default for many
    PostgreSQL binary installers.<caution>
        <para>Make sure you give yourself permissions to write to the folder
        <literal>/where/you/put/qt/plugins/designer</literal>. When xTuple is
        compiled it will need to create a library here for xTuple widget
        plugins. Without adequate permissions the library will not be created
        and you will not be able to properly edit and use files using xTuple
        widgets in Qt Designer.</para>
      </caution><tip>
        <para>If you want to build universal binaries then you must have
        PostgreSQL universal binaries as well.</para>
      </tip></para>
    <para os="macosx">If you have problems with loading the</para>
    <para os="linux" userlevel="installfromsrc">xTuple has not tried building
    PostBooks using Qt directly from Linux distribution installations, such as
    RPMs. If you try doing this then you are on your own.<programlisting>$ mkdir /opt/qt
$ cd /opt/qt
$ tar xzf whereever-the-tarball-is/qt-everywhere-opensource-src-4.8.0.tar.gz
$ cd qt-everywhere-opensource-src-4.8.0
$ ./configure # Configuration Parameters from above
$ make
$ sudo make install</programlisting>The <literal>-I</literal> and
    <literal>-L</literal> options are not necessary if you installed
    PostgreSQL in <literal>/usr</literal>.</para>
  </section>
  <section userlevel="installfromsrc">
    <title>Set your environment variables</title>
    <para>After installing all of this software, you will probably have to
    change your environment variables so the build processes can find all of
    the right pieces. All three of the major platforms use the same variable
    names: PATH, INCLUDE, and LIB. The differences are in the syntax you must
    use to specify the values, and where you have to set them. There may also
    be an additional variable or two to set on particular platforms.</para>
    <note>
      <para>In the following examples, environment variables are listed with
      spaces and newlines for readability. When you set these values, make
      sure you have no spaces and no newlines in your values.</para>
    </note>
    <note>
      <para>the following needs work to clarify what's dependent on actions
      taken in previous steps</para>
    </note>
    <para condition="mingw" os="windows">The general syntax for Windows
    environment variables containing several directory paths
    is<programlisting>VARIABLE=drive:path1;drive:path2;...</programlisting>If
    you are setting the value in the System Properties window, you won't have
    to type the VARIABLE=. Make sure you use the 8.3 file names, not the long
    filenames, when setting these environment variables. For example, you may
    need to type C:\PROGRA~1 instead of C:\Program Files.<programlisting>PATH=C:\Qt\pgsql\bin;
   C:\Qt\2009.04;
   C:\Qt\2009.04\mingw\bin;     # C:\mingw\bin if you installed MinGW
   C:\Qt\2009.04\qt\bin

INCLUDE=C:\Qt\2009.04\qt\include;
      C:\Qt\pgsql\include
      C:\mingw\include          # only if you installed MinGW

LIB=C:\Qt\pgsql\lib;
  C:\Qt\2009.04\qt\lib
  C:\mingw\lib                  # only if you installed MinGW</programlisting>In
    addition to the normal Windows environment settings, Qt has a special Qt
    Command Prompt command which overrides the PATH set in the System
    Properties. You will need to edit C:\Qt\2009.04\bin\qtenv.bat with a text
    editor to change the PATH set in that .bat file. Add the following
    lines:<programlisting>set PATH=%PATH%;C:\Qt\pgsql\bin
set PATH=%PATH%;C:\Qt\2009.03\qt</programlisting></para>
    <para condition="msvc" os="windows">The general syntax for Windows
    environment variables containing several directory paths
    is<programlisting>VARIABLE=drive:path1;drive:path2;...</programlisting>If
    you are setting the value in the System Properties window, you won't have
    to type the VARIABLE=. Make sure you use the 8.3 file names, not the long
    filenames, when setting these environment variables. For example, you may
    need to type C:\PROGRA~1 instead of C:\Program Files.<programlisting>PATH=C:\Program Files\Microsoft Visual Studio 10.0\VC\bin;
   C:\Program Files\Microsoft Visual Studio 10.0\Common\IDE;
   C:\Program Files\Microsoft SDKs\Windows\v7.0A\Bin;
   C:\postgresql\postgresql-version\include\libpq;
   C:\qt\qt-everywhere-opensource-src-4.8.0\bin
   C:\Windows\system32;

INCLUDE=C:\Program Files\Microsoft Visual Studio 8\VC\include;
      C:\Program Files\Microsoft SDKs\Windows\V7.0A\Include;
      C:\postgresql\postgresql-version\include;
      C:\postgresql\postgresql-version\include\libpq;
      C:\qt\qt-everywhere-opensource-src-4.8.0\include
LIB=C:\Program Files\Microsoft SDKs\Windows\V7.0A\Lib;
  C:\postgresql\postgresql-version\Lib\libpq;
  C:\qt\qt-everywhere-opensource-src-4.8.0\lib</programlisting>In addition to
    the normal Windows environment settings, Qt has a special Qt Command
    Prompt command which overrides the PATH set in the System Properties. You
    will need to edit C:\Qt\2009.04\bin\qtenv.bat with a text editor to change
    the PATH set in that .bat file. Add the following lines:<programlisting>set PATH=%PATH%;C:\Qt\pgsql\bin
set PATH=%PATH%;C:\Qt\2009.03\qt</programlisting></para>
    <note condition="msvc" os="windows">
      <para>Make sure to double check that the path to the file is correct,
      different systems and versions may have different paths to the file(s).
      Setting an incorrect value may cause programs to behave
      incorrectly.</para>
    </note>
    <programlisting os="macosx">PATH=/opt/postgresql/pg-version/bin:/opt/qt/qt-version/bin</programlisting>
    <programlisting os="linux">PATH=/opt/bin:/opt/qt/Qt-version/bin
INCLUDE=/opt/include:/opt/qt/Qt-version/include
LD_LIBRARY_PATH=/opt/lib:/opt/qt/Qt-version/lib</programlisting>
  </section>
  <section condition="mingw" os="windows" userlevel="installfrompkg">
    <title>Add PostgreSQL Support to Some Qt Binary Packages</title>
    <para>If you installed Qt from a package, you may need to build and
    install the Qt plugin for PostgreSQL. Qt is inconsistent about including
    the PostgreSQL plugin from release to release.</para>
    <para condition="msvc">From the Start menu, select Programs -&gt; Qt SDK
    -&gt; Desktop -&gt; Qt <replaceable>4.7.4</replaceable> for Desktop
    (Visual Studio)</para>
    <para condition="mingw">From the Start menu, select Programs -&gt; Qt SDK
    -&gt; Desktop -&gt; Qt <replaceable>4.7.4</replaceable> for Desktop
    (MinGW)</para>
    <para>In the cmd window that appears, execute the following
    commands:</para>
    <programlisting>&gt; cd \QtSDK\QtSources\4.7.4\src\sql\drivers\psql
&gt; qmake "INCLUDEPATH+=C:\\Qt\\pgsql\\include" "LIBS+=C:\\Qt\\pgsql\\lib\\libpq.a"
&gt; mingw32-make</programlisting>
    <para>We must now build QT to include the sqldrivers. First remove two
    files to avoid the dreaded "<code>*** [sub-webkit-make_default-ordered]
    Error 2</code>":</para>
    <programlisting>&gt; DEL C:\Qt\2009.03\qt\src\3rdparty\webkit\WebCore\tmp\moc\debug_shared\moc\include.tmp
&gt; DEL C:\Qt\2009.03\qt\src\3rdparty\webkit\WebCore\tmp\moc\release_shared\moc\include.tmp</programlisting>
    <para>Once those two files are deleted, run Qt Command Prompt and execute
    the following command:</para>
    <programlisting>&gt; configure.exe -debug-and-release -plugin-sql-psql -plugin-sql-odbc -plugin-sql-sqlite -qt-zlib -qt-gif -qt-libtiff -qt-libpng -qt-libmng -qt-libjpeg -qt-style-windowsxp -platform win32-g++ -L C:\Qt\pgsql\lib -I C:\Qt\pgsql\include</programlisting>
    <para>You will be prompted for the edition of Qt you want to use, and then
    the license agreement. The configure command will take a few minutes to
    complete. Now run this command:</para>
    <programlisting>&gt; mingw32-make</programlisting>
    <para>The mingw32-make process will take several hours, even on a fairly
    fast machine.</para>
  </section>
  <section>
    <title>Get the OpenRPT, CSVImp, and PostBooks source code</title>
    <para>The source code for the xTuple projects is broken into several
    distinct pieces (listed in increasing order of dependency):</para>
    <itemizedlist>
      <listitem>
        <para>OpenRPT</para>
      </listitem>
      <listitem>
        <para>CSVImp</para>
      </listitem>
      <listitem>
        <para>xTuple GUI client</para>
      </listitem>
    </itemizedlist>
    <para>The source folders for these components must reside in the same
    folder for the compile process to succeed (not exactly true, but close
    enough):</para>
    <programlisting>&lt;PARENT FOLDER&gt;
+ csvimp
+ openrpt
+ xtuple</programlisting>
    <para>Here is an example of checking out the sources using command line
    tools:</para>
    <programlisting>$ mkdir postbooks-checkout-area
$ cd postbooks-checkout-area
$ svn co https://postbooks.svn.sourceforge.net/svnroot/postbooks/xtuple/trunk xtuple
$ svn co https://openrpt.svn.sourceforge.net/svnroot/openrpt/openrpt/trunk openrpt
$ svn co https://postbooks.svn.sourceforge.net/svnroot/postbooks/csvimp/trunk csvimp</programlisting>
    <para>Note: Make sure to copy the link exactly listed, the name after the
    hyperlink designates the file and location on your local computer.</para>
    <para>Here is an example using RapidSVN on Windows. It places the source
    files in C:\Qt\xTuple-src.</para>
    <orderedlist>
      <listitem>
        <para>Start RapidSVN.</para>
      </listitem>
      <listitem>
        <para>In RapidSVN click REPOSITORY - CHECKOUT. Enter the URL and
        destination directory. Do this three times with the following
        URL/Directory combinations:<programlisting>https://postbooks.svn.sourceforge.net/svnroot/postbooks/openrpt/trunk C:\Qt\xTuple-src\openrpt
https://postbooks.svn.sourceforge.net/svnroot/postbooks/xtuple/trunk C:\Qt\xTuple-src\xtuple 
https://postbooks.svn.sourceforge.net/svnroot/postbooks/csvimp/trunk C:\Qt\xTuple-src\csvimp</programlisting></para>
        <para>Accept a security key for each host when you connect. Once the
        sources are downloaded, you can close RapidSVN.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Build OpenRPT</title>
    <para>Next build OpenRPT:</para>
    <para os="windows">Using the Qt command prompt use the following commands
    in order to compile the downloaded source code.</para>
    <programlisting condition="mingw" os="windows">&gt; cd OpenRPT-checkout-dir
&gt; qmake
&gt; mingw32-make</programlisting>
    <programlisting condition="msvc" os="windows">&gt; cd OpenRPT-checkout-dir
&gt; qmake
&gt; nmake</programlisting>
    <para os="macosx">If you are building OpenRPT versions 3.1.1 and earlier
    and you are <emphasis>not</emphasis> making a universal binary, edit the
    <filename>global.pri</filename> file and remove the processor entry, x86
    or ppc, that is <emphasis>not</emphasis> applicable to your system from
    the macx section.</para>
    <para os="macosx">In versions 3.1.2 and later (specifically tags after
    R3_1_2DEV2) you need to add a special <filename>macx.pri</filename> file
    in the top level of the openrpt sources to get universal binaries. Add a
    line that looks something like this:<programlisting>CONFIG += ppc x86 x86_64</programlisting></para>
    <programlisting os="macosx" userlevel="installfromsrc">$ cd OpenRPT-checkout-dir
$ qmake
$ make</programlisting>
    <programlisting os="macosx" userlevel="installfrompkg">$ cd OpenRPT-checkout-dir
$ qmake -spec macx-g++
$ make</programlisting>
    <programlisting os="linux">$ cd OpenRPT-checkout-dir
$ qmake
$ make</programlisting>
    <para os="linux">If <command>make</command> does not exist in your Linux
    environment, try <command>gmake</command> instead.</para>
    <para>When the build is complete, verify that OpenRPT works. Go to your
    OpenRPT-checkout-dir/bin and run <command>OpenRPT.exe</command> (or
    <command>openrpt</command> on Linux or <command>openrpt.app</command> on
    Mac). Select DATABASE - CONNECT TO DATABASE from the program's menu. Click
    the OPTIONS button and enter your database information. If the PostgreSQL
    driver does not appear in the list, then it has failed to load probably
    because of some missing dependencies. See the troubleshooting section
    below for help resolving these dependency problems. Make sure that you can
    connect to your database before continuing.</para>
  </section>
  <section>
    <title>Build CSVImp</title>
    <para>Next build CSVImp. Follow exactly the same steps as for OpenRPT,
    only change to the CSVImp checkout directory first.</para>
    <warning condition="msvc" os="windows">
      <para>Sometimes people get a build error at this point. If nmake
      complains with <code><literal>fatal error U1073 don't know how to make
      '..\..\openrpt\lib\common.lib'</literal></code> then you may have to
      change the configuration in OpenRPT and rebuild there before continuing.
      Edit <filename>openrpt/global.pri</filename> or
      <filename>openrpt/win32.pri</filename> and turn off debugging in the
      configuration (either add a line <code>CONFIG -= debug</code> or simply
      remove the word debug if it's already there.</para>
    </warning>
  </section>
  <section>
    <title>Build the main xTuple application</title>
    <para os="macosx">If you are building xTuple ERP versions 3.4.0 and
    earlier and you are <emphasis>not</emphasis> making a universal binary,
    edit the <filename>global.pri</filename> file and remove the processor
    entry, x86 or ppc, that is <emphasis>not</emphasis> applicable to your
    system from the macx section.</para>
    <para os="macosx">In versions after 3.4.0, you need to add a special
    <filename>macx.pri</filename> file in the top level of the xtuple sources
    to get universal binaries. Add a line that looks like
    this:<programlisting>CONFIG += ppc x86 x86_64</programlisting>The exact
    text will differ depending on the architectures you want to build for and
    the way PostgreSQL and Qt were built.</para>
    <programlisting>$ cd checkout-dir/xtuple
$ qmake
$ make</programlisting>
    <para os="macosx" userlevel="installfrompkg">By default the qmake that
    comes with Qt binary installations tries to create Xcode project files
    instead of Makefiles. To work around this, use the -spec argument when you
    run qmake at the top level:<programlisting>$ qmake -spec macx-g++</programlisting></para>
    <para>You can use the CSV import tool from the main xTuple application
    starting with xTuple ERP 3.5.1. If you want to do so, copy the plugin
    library to the right location. Assuming the xtuple, openrpt, and csvimp
    directories are next to each other, here are the steps:</para>
    <para><programlisting condition="mingw" os="windows">% mkdir bin\plugins
% cp ..\csvimp\plugins\csvimpplugin.dll bin\plugins</programlisting><programlisting
    condition="msvc" os="windows">% mkdir bin\plugins
% cp ..\csvimp\plugins\pluginlibraryname bin\plugins</programlisting><programlisting
    os="macosx">$ mkdir bin/xtuple.app/Contents/plugins
$ cp ../csvimp/plugins/libcsvimpplugin.dylib bin/xtuple.app/Contents/plugins</programlisting><programlisting
    os="linux">$ mkdir bin/xtuple/plugins
$ cp ../csvimp/plugins/libcsvimpplugin.so bin/xtuple/plugins</programlisting></para>
  </section>
  <section>
    <title>Bundle xTuple ERP for distribution</title>
    <para>If you want to distribute your compiled xTuple ERP binaries to other
    machines, you'll need to bundle the necessary shared libraries and
    distribute the whole collection.</para>
    <programlisting condition="mingw" os="windows">COPY c:\qt\2009.03\mingw\bin\MINGWM10.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QT3SUPPORT4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTASSISTANTCLIENT4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTCORE4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTDESIGNER4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTDESIGNERCOMPONENTS4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTGUI4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTNETWORK4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTSCRIPT4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTSCRIPTTOOLS4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTSQL4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTWEBKIT4.DLL c:\qt\xtuple-src\xtuple\bin\
COPY c:\qt\2009.03\qt\bin\QTXML4.DLL c:\qt\xtuple-src\xtuple\bin\</programlisting>
    <para condition="msvc" os="windows">Distribution on Windows with Visual
    C++ is not documented yet.</para>
    <para os="macosx"><programlisting>$ mkdir .../xtuple/../xTuple-version
$ cd .../xTuple-version
$ cp -r ../xtuple/bin/xtuple.app .
$ cp ../xtuple/share/XTupleGUIClient.qch xtuple.app/Contents/Resources
$ cp ../xtuple/share/XTupleGUIClient.qhc xtuple.app/Contents/Resources
$ cp ../xtuple/hunspell/English.* xtuple.app/Contents/MacOS
$ mkdir xtuple.app/Contents/MacOS/welcome
$ cp ../xtuple/share/dict/welcome/*.qm xtuple.app/Contents/MacOS/welcome
$ macdeployqt xtuple.app
$ echo "[Paths]
&gt; Plugins = PlugIns" &gt;&gt; xtuple.app/Contents/Resources/qt.conf
$ cd ..
$ hdiutil create -fs HFS+ -volname xTuple-version -srcfolder xTuple-version xTuple-version.dmg</programlisting></para>
    <para os="linux">Distribution on Linux is not documented yet.</para>
  </section>
</chapter>
