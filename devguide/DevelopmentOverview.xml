<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
  <title>Application Development Overview</title>
  <para>The xTuple application suite contains the following
  applications:</para>
  <variablelist>
    <varlistentry>
      <term><application>PostBooks</application></term>
      <listitem>
        <para>a free, open source package for Accounting, ERP, and CRM</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><application>OpenMFG</application></term>
      <listitem>
        <para>a more feature-laden package that shares much of the PostBooks
        source code</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><application>OpenRPT</application></term>
      <listitem>
        <para>a free, open source report writer that can be used on its own or
        embedded in other applications and is embedded in
        <application>PostBooks</application> and
        <application>OpenMFG</application></para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><application>CSVimp</application></term>
      <listitem>
        <para>a free, open source tool for importing data into a database from
        comma-separated text files</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><application>Updater</application></term>
      <listitem>
        <para>a free, open source tool for upgrading databases by applying SQL
        statements to the database and importing reports created with
        <application>OpenRPT</application></para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>The source code for the open source applications above is available
  through the PostBooks project on the SourceForge website. The additions to
  <application>PostBooks</application> which implement the
  <application>OpenMFG</application> features can be obtained from
  <orgname>xTuple</orgname>'s source code repository.</para>
  <para>This document outlines basic information you need to know to get
  started with xTuple application development. Details on setting up your
  development environment are described in <orgname>xTuple</orgname>'s <olink
  targetdoc="DevelopmentEnvSetup.xml">Developers' Guide to Configuring a
  Development Environment</olink>.</para>
  <section>
    <title>Source Code Management</title>
    <para>The source code for the xTuple applications is managed using either
    <application>Subversion</application> (<application>SVN</application>) or
    the <application>Concurrent Versioning System</application>
    (<application>CVS</application>). The latest versions for each of the open
    source applications can be obtained directly from the source code
    repositories.</para>
    <para role="openmfg">xTuple maintains a separate
    <application>CVS</application> server accessible to VARs and paying
    customers for the <application>OpenMFG</application> additions. The
    contents of this server are updated at the time of each release. Access to
    this <application>CVS</application> server requires authentication with a
    username and password, both of which can be obtained by sending an email
    to <ulink
    url="mailto::support@xtuple.com">support@xtuple.com</ulink>.</para>
    <para>Both <application>SVN</application> and
    <application>CVS</application> can be used from the command line or
    through GUI tools. Most Linux versions come with a command line version of
    <application>CVS</application> installed by default and some come with
    <application>SVN</application> as well. On the Macintosh
    <application>CVS</application> command line tools are installed as part of
    the <application>Xcode</application> software development environment;
    newer versions of <application>Xcode</application> also install
    <application>SVN</application>. For Windows you'll need to get
    <application>CVS</application> and <application>SVN</application> on your
    own. There are several GUI tools for accessing
    <application>CVS</application> and <application>SVN</application> for the
    various platforms, such as <application>WinCVS</application>
    (http://www.wincvs.org) on the Windows platform and
    <application>RapidSVN</application>.</para>
    <section>
      <title>OpenRPT in <application>CVS</application></title>
      <para>The code base for <application>OpenRPT</application>, the Open
      Report Writer and Open Report Renderer (RPTRender) and other support
      tools, is under <application>CVS</application> control. This project is
      housed at SourceForge.net (http://sourceforge.net/projects/openrpt)
      where you can find binary and source downloads, project management
      tools, and information on how to access the
      <application>CVS</application> repository (<ulink
      url="http://sourceforge.net/cvs/?group_id=132959">http://sourceforge.net/cvs/?group_id=132959</ulink>).</para>
      <para>There are two modules in the <application>OpenRPT</application>
      repository: <literal>openrpt</literal> and <literal>docs</literal>. The
      <literal>openrpt</literal> module is the core code for the
      <application>OpenRPT</application> application. The
      <literal>docs</literal> module has the documentation that we have
      created. To compile <application>OpenRPT</application>, only the openrpt
      module is required.</para>
      <para>Once you have downloaded the source code for
      <application>OpenRPT</application>, you may compile it using
      <application>Qt</application> and an appropriate C++ compiler.</para>
      <note>
        <para><application>Qt</application> is required to compile
        <application>OpenRPT</application>. To successfully compile
        <application>OpenRPT</application>, you must download either a
        <application>Qt</application> binary package or download and build a
        <application>Qt</application> source package.</para>
      </note>
    </section>
    <section>
      <title>PostBooks in Subversion</title>
      <para>The code for the core <application>PostBooks</application>
      application is stored in a <application>Subversion</application>
      repository managed by SourceForge. The two key modules are
      <literal>xtuple</literal> and <literal>xtupleserver</literal>. The
      <literal>xtupleserver</literal> module contains all the database-related
      scripts used during development and for the upgrades from each database
      version of the application. The <literal>xtuple</literal> module
      contains all the C++ code and supporting files required to actually
      build the GUI application.</para>
      <para>The <literal>xtupleserver</literal> module has three significant
      sub-folders:</para>
      <variablelist>
        <varlistentry>
          <term><filename>dbscripts</filename></term>
          <listitem>
            <para>This directory holds the stored procedure, view, and trigger
            definitions used by the PostBooks application. These can be
            changed and loaded directly into a database. This is where the
            majority of the PostBooks business logic is contained.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><filename>updateScripts</filename></term>
          <listitem>
            <para>This directory has one subdirectory for each past release
            and one for the next upcoming release. Each of these
            subdirectories holds a collection of SQL scripts that define
            changes to the database required for the following release. Some
            scripts might change the database structure while others might add
            or delete data or be copied from the dbscripts directory.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><filename>packages</filename></term>
          <listitem>
            <para>This directory holds the upgrade packages for migrating a
            database from one release of the application to the next. Each
            package is built either from a corresponding updateScripts
            directory or a collection of previous update packages, plus some
            additional support files needed to perform operations in the
            correct sequence and load modified reports.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>The <literal>xtuple</literal> module contains all the GUI client
      code for the <application>PostBooks</application> and
      <application>OpenMFG</application> applications. The most significant of
      subdirectory is named <filename>guiclient</filename>. This is where the
      majority of the source code is located for the application. In addition,
      there is the <filename>widgets</filename> directory, which holds the
      source code for custom widgets used in the application and as plugins
      for the Qt Designer application. See <orgname>xTuple</orgname>'s <olink
      targetdoc="DevelopmentEnvSetup.xml">Developers' Guide to Configuring a
      Development Environment</olink> for details on how to compile the
      <literal>xtuple</literal> module.</para>
      <note>
        <para>Both <application>Qt</application> and the
        <application>OpenRPT</application> code are required to compile the
        <literal>xtuple</literal> module. To successfully compile
        <application>PostBooks</application> or
        <application>OpenMFG</application>, you must first download and
        install <application>Qt</application> and download and compile
        <application>OpenRPT</application>.</para>
      </note>
      <para>In addition to the application source code, the
      <literal>xtuple</literal> module contains report definitions,
      translation files, and other support files. These files are not compiled
      but are an important part of the xTuple applications.</para>
    </section>
    <section>
      <title><application>Updater</application> in
      <application>Subversion</application></title>
      <para></para>
    </section>
    <section>
      <title><application>CSVimp</application> in
      <application>Subversion</application></title>
      <para></para>
    </section>
    <section>
      <title>Qt Development Tools</title>
      <section>
        <title>Overview</title>
        <para>Qt is an application framework written in C++ and used to
        develop multiplatform applications. By using an application framework,
        we are able to build applications without the need to worry about
        platform or system specific coding or scenarios. In addition, Qt
        provides a number of additional tools and libraries that are often
        needed by applications. Some of the tools provided, like Qt Designer,
        allow the creation of GUI screens with a WYSIWYG tool, while others,
        like Qt's Linguist, allow you to create and support multilingual
        applications. On top of all this, Qt's framework also helps speed up
        the development process.</para>
        <para>More information about Qt and its features and tools can be
        found at Trolltech's website: http://www.trolltech.com.</para>
      </section>
      <section>
        <title>Designer</title>
        <para>Qt's Designer application allows you to create the forms or GUI
        screens required for a WYSIWYG environment. Its drag-and-drop
        functionality makes it easy to create layouts without any coding
        required. Forms created using Designer are saved with a .ui extension.
        Compiler tools are then used to convert the .ui form into a C++ file.
        The generated C++ files can then be sub-classed to add the required
        business logic to make them functional.</para>
        <para></para>
      </section>
      <section>
        <title>Linguist</title>
        <para>Qt also allows you to load language translation files into an
        application at run-time. The result is that application text (i.e.,
        screen titles, field labels, help files, etc.) will be displayed in
        the language of the translation file. Qt handles this internally by
        using a tr() function. This function wraps any literal text found in
        an application and allows for dictionary lookup and replacements to be
        performed at run time. These tr()'s are also used to identify text
        needed to build the translation files.</para>
        <para>There are two files used for the translation process. The first
        is a .ts file, and the second is a .qm file.</para>
        <para>The .ts file is the translation source files. This file is an
        XML based file which can be updated and edited using the lupdate and
        Qt Linguist tools. Every instance of text in an application that is
        translated has its own context, source, and translation field. The
        context changes usually from screen-to-screen and allows you to have
        two identical texts translated differently in different contexts. The
        translation field includes the text you want to show in place of the
        source text for a given context.</para>
        <para>The .qm file is created from the .ts file using the lrelease
        tool and is a more compact and efficient file used by the application
        at run-time. Once the .qm file is generated, the OpenMFG application
        can be made to use it simply by using the system's Locale
        configuration. In practice, when a user logs into OpenMFG using a
        specified Locale, the language (i.e., translation) corresponding to
        that Locale will be displayed. In addition, the application supports
        the placement of a translation file called default.qm in the same
        directory as the executable. If a system is set up this way, OpenMFG
        will use that default file and no additional configuration will be
        required.</para>
      </section>
    </section>
  </section>
</article>